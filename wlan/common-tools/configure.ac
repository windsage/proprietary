#                                               -*- Autoconf -*-

# configure.ac -- Autoconf script for qcacld-common-tools
#

# Process this file with autoconf to produce a configure script

# Requires autoconf tool later than 2.61
AC_PREREQ(2.61)
# Initialize the qcacld-common-tools package version 1.0.0
AC_INIT([qcacld-common-tools],1.0.0)
# Does not strictly follow GNU Coding standards
AM_INIT_AUTOMAKE([foreign])
# Disables auto rebuilding of configure, Makefile.ins
AM_MAINTAINER_MODE
# defines some macros variable to be included by source
AC_CONFIG_HEADERS([config.h])
AC_CONFIG_MACRO_DIR([m4])

# Checks for programs.
AC_PROG_CC
AC_PROG_CXX
AM_PROG_CC_C_O
AC_PROG_LIBTOOL
AC_PROG_AWK
AC_PROG_CPP
AC_PROG_INSTALL
AC_PROG_LN_S
AC_PROG_MAKE_SET

# Checks for libraries.
PKG_CHECK_MODULES([DIAG], [diag])
AC_SUBST([DIAG_CFLAGS])
AC_SUBST([DIAG_LIBS])

AC_ARG_WITH([glib],
      AC_HELP_STRING([--with-glib],
         [enable glib, building common tools  which use glib]))

if (test "x${with_glib}" = "xyes"); then
        PKG_CHECK_MODULES(GTHREAD, gthread-2.0 >= 2.16, dummy=yes,
                               AC_MSG_ERROR(GThread >= 2.16 is required))
        PKG_CHECK_MODULES(GLIB, glib-2.0 >= 2.16, dummy=yes,
                                AC_MSG_ERROR(GLib >= 2.16 is required))
        GLIB_CFLAGS="$GLIB_CFLAGS $GTHREAD_CFLAGS"
        GLIB_LIBS="$GLIB_LIBS $GTHREAD_LIBS"

        AC_SUBST(GLIB_CFLAGS)
        AC_SUBST(GLIB_LIBS)
fi
AM_CONDITIONAL(USE_GLIB, test "x${with_glib}" = "xyes")

AC_ARG_ENABLE([ipq_common_tool],
        [  --enable-ipq_common_tool    Turn on ipq_common_tool],
        [case "${enableval}" in
            yes) ipq_common_tool=true ;;
            no)  ipq_common_tool=false ;;
            *) AC_MSG_ERROR([bad value ${enableval} for --enable-ipq_common_tool]) ;;
        esac],[ipq_common_tool=false])
AM_CONDITIONAL([IPQ_COMMON_TOOL], [test x$ipq_common_tool = xtrue])

AC_ARG_ENABLE([debug],
        [  --enable-debug    Turn on debugging],
        [case "${enableval}" in
            yes) debug=true ;;
            no)  debug=false ;;
            *) AC_MSG_ERROR([bad value ${enableval} for --enable-debug]) ;;
        esac],[debug=false])
AM_CONDITIONAL([DEBUG], [test x$debug = xtrue])

AC_ARG_ENABLE([cld80211],
	[  --enable-cld80211    Turn on cld80211],
	[case "${enableval}" in
	    yes) cld80211=true ;;
	    no)  cld80211=false ;;
	    *) AC_MSG_ERROR([bad value ${enableval} for --enable-cld80211]) ;;
	esac],[cld80211=false])
AM_CONDITIONAL([CLD80211], [test x$cld80211 = xtrue])

AC_ARG_ENABLE([qcm6490],
	[  --enable-qcm6490  Enable vendorcmdtool for QCM6490],
	[case "${enableval}" in
	    yes) qcm6490=true ;;
	    no)  qcm6490=false ;;
	    *) AC_MSG_ERROR([bad value ${enableval} for --enable-qcm6490]) ;;
	esac],[qcm6490=false])
AM_CONDITIONAL([CONFIG_WLAN_QCLINUX], [test x$qcm6490 = xtrue -o x$all = xtrue])

AC_ARG_VAR(cld80211_lib_path, "Path to cld80211-lib")

if (test x$cld80211 = xtrue); then
	CLD80211_PATH="${cld80211_lib_path}"
	AC_SUBST(CLD80211_PATH)
	AS_IF([test "x${cld80211_lib_path}" = "x"],[AC_MSG_ERROR([pass cld80211_lib_path=path to cld80211-lib])]])
fi

has_libnl_ver=0
# libnl-2 provides only libnl-2.0.pc file, so we check for separate libnl-genl-3.0.pc
# pkg-config file just for libnl-3.0 case.
#
PKG_CHECK_MODULES([LIBNL], [libnl-3.0 >= 3.0 libnl-genl-3.0 >= 3.0], [has_libnl_ver=3], [
   PKG_CHECK_MODULES([LIBNL], [libnl-2.0 >= 2.0], [has_libnl_ver=2], [
           PKG_CHECK_MODULES([LIBNL], [libnl-1], [has_libnl_ver=1], [has_libnl_ver=0])])])

if (test "$has_libnl_ver" -eq 0); then
        AC_MSG_ERROR(libnl and libnl-genl are required but were not found)
fi

AC_SUBST([LIBNL_CFLAGS])
AC_SUBST([LIBNL_LIBS])


# Checks for typedefs, structures, and compiler characteristics.
AC_HEADER_STDBOOL
AC_HEADER_STDC
AC_C_INLINE
AC_TYPE_INT64_T
AC_TYPE_PID_T
AC_TYPE_SIZE_T
AC_TYPE_SSIZE_T
AC_TYPE_UINT16_T
AC_TYPE_UINT32_T
AC_TYPE_UINT8_T

# Checks for library functions.
AC_FUNC_ERROR_AT_LINE
AC_FUNC_FORK
AC_FUNC_MALLOC

if (test x$qcm6490 = xtrue); then
	PKG_CHECK_MODULES([LIBXML], [libxml-2.0])
	AC_SUBST([LIBXML_CFLAGS])
	AC_SUBST([LIBXML_LIBS])
fi

AC_CONFIG_FILES([ \
		Makefile \
		cnssdiag/Makefile \
		dppdaemon/Makefile \
		ctrl_app_dut/Makefile \
        ])
AC_OUTPUT

AM_COND_IF([CONFIG_WLAN_QCLINUX],
	   [AC_CONFIG_FILES([vendorcmdtool/Makefile])])
	   AC_OUTPUT
