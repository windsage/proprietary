# configure.ac -- Autoconf script for slim-daemon
#
# Process this file with autoconf to produce a configure script

# Requires autoconf tool later than 2.61
AC_PREREQ(2.61)
# Initialize the gps gslim-daemon package version 1.0.0
AC_INIT([slim-daemon],1.0.0)
# Does not strictly follow GNU Coding standards
AM_INIT_AUTOMAKE([foreign subdir-objects])
# Disables auto rebuilding of configure, Makefile.ins
AM_MAINTAINER_MODE
# Verifies the --srcdir is correct by checking for the path
AC_CONFIG_SRCDIR([Makefile.am])
# defines some macros variable to be included by source
AC_CONFIG_HEADERS([config.h])
AC_CONFIG_MACRO_DIR([m4])

# Checks for programs.
AC_PROG_LIBTOOL
AC_PROG_CXX
AC_PROG_CC
AM_PROG_CC_C_O
AC_PROG_AWK
AC_PROG_CPP
AC_PROG_INSTALL
AC_PROG_LN_S
AC_PROG_MAKE_SET
PKG_PROG_PKG_CONFIG

# Checks for libraries.
PKG_CHECK_MODULES([QMIF], [qmi-framework])
AC_SUBST([QMIF_CFLAGS])
AC_SUBST([QMIF_LIBS])

PKG_CHECK_MODULES([DIAG], [diag])
AC_SUBST([DIAG_CFLAGS])
AC_SUBST([DIAG_LIBS])

PKG_CHECK_MODULES([GPSUTILS], [qcom-gps-utils])
AC_SUBST([GPSUTILS_CFLAGS])
AC_SUBST([GPSUTILS_LIBS])

PKG_CHECK_MODULES([LOCMQCLIENT], [loc-mq-client])
AC_SUBST([LOCMQCLIENT_CFLAGS])
AC_SUBST([LOCMQCLIENT_LIBS])

PKG_CHECK_MODULES([LOCBASEUTIL], [loc-base-util])
AC_SUBST([LOCBASEUTIL_CFLAGS])
AC_SUBST([LOCBASEUTIL_LIBS])

PKG_CHECK_MODULES([LOCCORE], [loc-core])
AC_SUBST([LOCCORE_CFLAGS])
AC_SUBST([LOCCORE_LIBS])

PKG_CHECK_MODULES([SLIMUTILS], [slim-utils], [FEATURE_LOCTECH_SLIM_DEBUG=true], [GPS_LOC_API_V02_ENABLED=true], [FEATURE_LOCTECH_SLIM_LOG_CONSOLE=false], [FEATURE_LOCTECH_SLIM_QMILOC=true], [FEATURE_LOCTECH_SLIM_DSPS=true], [FEATURE_LOCTECH_SLIM_NDK=false], [FEATURE_LOCTECH_QMISLIM_PROVIDER_MP=true], [FEATURE_LOCTECH_QMISLIM_PROVIDER_TEST=false], [FEATURE_LOCTECH_SLIM_VNW=false], [FEATURE_LOCTECH_SLIM_REMOTE_PROVIDER=false], [FEATURE_LOCTECH_SLIM_SENSOR_HAL=true], [FEATURE_LOCTECH_SLIM_SENSOR_HAL_DAEMON=false], [FEATURE_LOCTECH_SLIM_SENSOR_PLAYBACK=true])
AC_SUBST([SLIMUTILS_CFLAGS])
AC_SUBST([SLIMUTILS_LIBS])

PKG_CHECK_MODULES([SLIMCOMMON], [slim-common])
AC_SUBST([SLIMCOMMON_CFLAGS])
AC_SUBST([SLIMCOMMON_LIBS])

PKG_CHECK_MODULES([SLIMCOMMON], [sensorplayback])
AC_SUBST([SENSORPLAYBACK_CFLAGS])
AC_SUBST([SENSORPLAYBACK_LIBS])

PKG_CHECK_MODULES([SLIMCLIENT], [slim-client])
AC_SUBST([SLIMCLIENT_CFLAGS])
AC_SUBST([SLIMCLIENT_LIBS])

PKG_CHECK_MODULES([EP], [engine-plugin])
AC_SUBST([EP_CFLAGS])
AC_SUBST([EP_LIBS])

AC_ARG_WITH([locpla_includes],
      AC_HELP_STRING([--with-locpla-includes=@<:@dir@:>@],
         [specify the path to locpla-includes in loc-pla_git.bb]),
      [locpla_incdir=$withval],
      with_locpla_includes=no)

if test "x$with_locpla_includes" != "xno"; then
   AC_SUBST(LOCPLA_CFLAGS, "-I${locpla_incdir}")
fi

AC_ARG_WITH([slimcommon_includes],
      AC_HELP_STRING([--with-slimcommon-includes=@<:@dir@:>@],
        [Specify the path to slimcommon-includes in slim-client_git.bb]),
      [slimcommon_incdir=$withval],
      with_slimcommon_includes=no)

if test "x${with_slimcommon_includes}" != "xno"; then
   AC_SUBST(SLIMCOMMONHDR_CFLAGS, "-I${slimcommon_incdir}")
fi

PKG_CHECK_MODULES([CANWRAPPER], [libcanwrapper])
AC_SUBST([CANWRAPPER_CFLAGS])
AC_SUBST([CANWRAPPER_LIBS])

PKG_CHECK_MODULES([LIBSENSORS], [libsensors])
AC_SUBST([LIBSENSORS_CFLAGS])
AC_SUBST([LIBSENSORS_LIBS])

PKG_CHECK_MODULES([PROTOBUF], [protobuf])
AC_SUBST([PROTOBUF_CFLAGS])
AC_SUBST([PROTOBUF_LIBS])

AC_ARG_WITH([core_includes],
      AC_HELP_STRING([--with-core-includes=@<:@dir@:>@],
         [Specify the location of the core headers]),
      [core_incdir=$withval],
      with_core_includes=no)

if test "x$with_core_includes" != "xno"; then
   CPPFLAGS="${CPPFLAGS} -I${core_incdir}"
fi

AC_SUBST([CPPFLAGS])

AC_ARG_WITH([glib],
      AC_HELP_STRING([--with-glib],
         [enable glib, building HLOS systems which use glib]))

if (test "x${with_glib}" = "xyes"); then
        AC_DEFINE(ENABLE_USEGLIB, 1, [Define if HLOS systems uses glib])
        PKG_CHECK_MODULES(GTHREAD, gthread-2.0 >= 2.16, dummy=yes,
                                AC_MSG_ERROR(GThread >= 2.16 is required))
        PKG_CHECK_MODULES(GLIB, glib-2.0 >= 2.16, dummy=yes,
                                AC_MSG_ERROR(GLib >= 2.16 is required))
        GLIB_CFLAGS="$GLIB_CFLAGS $GTHREAD_CFLAGS"
        GLIB_LIBS="$GLIB_LIBS $GTHREAD_LIBS"

        AC_SUBST(GLIB_CFLAGS)
        AC_SUBST(GLIB_LIBS)
fi

AM_CONDITIONAL(USE_GLIB, test "x${with_glib}" = "xyes")

AC_ARG_ENABLE(target,
  [AS_HELP_STRING([--enable-target=TARGET], [Specify the target product to build])],
  [TARGET=$enableval],
  [TARGET=none]
)

AC_ARG_ENABLE([vnw],
        [  --enable-vnw    enable VNW provider],
        [case "${enableval}" in
            yes) vnw=true ;;
            no)  vnw=false ;;
            *) AC_MSG_ERROR([bad value ${enableval} for --enable-vnw]) ;;
        esac],[vnw=false])

AM_CONDITIONAL(FEATURE_LOCTECH_SLIM_VNW, [test x$vnw = xtrue])
AM_COND_IF(FEATURE_LOCTECH_SLIM_VNW, [
   PKG_CHECK_MODULES([CANWRAPPER], [libcanwrapper])
   AC_SUBST([CANWRAPPER_CFLAGS])
   AC_SUBST([CANWRAPPER_LIBS])
])

AC_ARG_ENABLE([hal],
        [  --enable-hal    enable HAL provider],
        [case "${enableval}" in
            yes) hal=true ;;
            no)  hal=false ;;
            *) AC_MSG_ERROR([bad value ${enableval} for --enable-hal]) ;;
        esac],[hal=true])

AM_CONDITIONAL(FEATURE_LOCTECH_SLIM_SENSOR_HAL, [test x$hal = xtrue])

AC_ARG_ENABLE([haldaemon],
        [  --enable-haldaemon    enable HAL Daemon provider],
        [case "${enableval}" in
            yes) haldaemon=true ;;
            no)  haldaemon=false ;;
            *) AC_MSG_ERROR([bad value ${enableval} for --enable-haldaemon]) ;;
        esac],[haldaemon=false])

AM_CONDITIONAL(FEATURE_LOCTECH_SLIM_SENSOR_HAL_DAEMON, [test x$haldaemon = xtrue])

AM_COND_IF(FEATURE_LOCTECH_SLIM_SENSOR_HAL_DAEMON, [
   PKG_CHECK_MODULES([SENSORCLIENTAPI], [sensor-client-api])
   AC_SUBST([SENSORCLIENTAPI_CFLAGS])
   AC_SUBST([SENSORCLIENTAPI_LIBS])
])

AC_ARG_ENABLE([rp],
        [  --enable-rp    enable remote provider],
        [case "${enableval}" in
            yes) rp=true ;;
            no)  rp=false ;;
            *) AC_MSG_ERROR([bad value ${enableval} for --enable-rp]) ;;
        esac],[rp=false])

AM_CONDITIONAL(FEATURE_LOCTECH_SLIM_REMOTE_PROVIDER, [test x$rp = xtrue])

AM_CONDITIONAL(GPS_LOC_API_V02_ENABLED, [test x$GPS_LOC_API_V02_ENABLED = xtrue])
AM_CONDITIONAL(FEATURE_LOCTECH_QMISLIM_PROVIDER_MP, [test x$FEATURE_LOCTECH_QMISLIM_PROVIDER_MP = xtrue])
AM_CONDITIONAL(FEATURE_LOCTECH_QMISLIM_PROVIDER_TEST, [test x$FEATURE_LOCTECH_QMISLIM_PROVIDER_TEST = xtrue])

AM_CONDITIONAL(FEATURE_LOCTECH_SLIM_NDK, [test x$FEATURE_LOCTECH_SLIM_NDK = xtrue])
AC_ARG_ENABLE([dsps],
        [  --enable-dsps    enable SensorProtobuf provider],
        [case "${enableval}" in
            yes) dsps=true ;;
            no)  dsps=false ;;
            *) AC_MSG_ERROR([bad value ${enableval} for --enable-dsps]) ;;
        esac],[dsps=false])
AM_CONDITIONAL(FEATURE_LOCTECH_SLIM_DSPS, [test x$dsps = xtrue])
AM_CONDITIONAL(FEATURE_LOCTECH_SLIM_QMILOC, [test x$FEATURE_LOCTECH_SLIM_QMILOC = xtrue])
AC_ARG_ENABLE([ic],
        [  --enable-ic    enable Internal Client],
        [case "${enableval}" in
            yes) ic=true ;;
            no)  ic=false ;;
            *) AC_MSG_ERROR([bad value ${enableval} for --enable-ic]) ;;
        esac],[ic=false])
AM_CONDITIONAL(FEATURE_LOCTECH_SLIM_INT_CLIENT, [test x$ic = xtrue])

AC_ARG_ENABLE([protobuf],
        [  --enable-protobuf    enable protobuf],
        [case "${enableval}" in
            yes) protobuf=true ;;
            no)  protobuf=false ;;
            *) AC_MSG_ERROR([bad value ${enableval} for --enable-protobuf]) ;;
        esac],[protobuf=false])
AM_CONDITIONAL(SLIM_REMOTE_MSG_PROTO_ENABLED, [test x$protobuf = xtrue])
AM_CONDITIONAL(PTP_SUPPORTED, [test "x$TARGET" = "xsdxpoorwills" -o "x$TARGET" = "xsa8155" -o "x$TARGET" = "xsa8155agl"])

AM_CONDITIONAL(FEATURE_LOCTECH_SLIM_SENSOR_PLAYBACK, [test x$FEATURE_LOCTECH_SLIM_DEBUG = xtrue])

AC_CONFIG_FILES([ \
        Makefile \
        provider/sensorplayback/Makefile \
        slim-daemon.pc
        ])

AC_OUTPUT
