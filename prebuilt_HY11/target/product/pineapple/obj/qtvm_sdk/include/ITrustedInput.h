/*===================================================================================
  Copyright (c) 2020 - 2021, 2023 Qualcomm Technologies, Inc.
  All Rights Reserved.
  Confidential and Proprietary - Qualcomm Technologies, Inc.
  ===================================================================================*/
/*===================================================================================
FILE:  ITrustedInput.idl

DESCRIPTION:  This file contains interface for invoking the TrustedInput
interface.
1) To register VMClientApp Callback object.
2) VMClientApp to call getInput with the timeout period.

=====================================================================================*/
#pragma once
// AUTOGENERATED FILE: DO NOT EDIT

#include <stdint.h>
#include "object.h"
#include "ITrustedInputCallBack.h"

#define TrustedInput_SUCCESS UINT32_C(0)

#define TrustedInput_ERROR_ACCESS_CONTROLFD INT32_C(10)
#define TrustedInput_ERROR_OPEN_CONTROLFD INT32_C(11)
#define TrustedInput_ERROR_OPEN_TOUCHDATAFD INT32_C(12)
#define TrustedInput_ERROR_READ_DEVICENODE INT32_C(13)
#define TrustedInput_ERROR_GET_DEVICENODE INT32_C(14)
#define TrustedInput_ERROR_INVALID_TOUCH_DEVICENODE INT32_C(15)
#define TrustedInput_ERROR_IOCTL_TOUCHDATAFD INT32_C(16)
#define TrustedInput_ERROR_READ_FAILED INT32_C(17)
#define TrustedInput_ERROR_REGISTER_CBO INT32_C(18)
#define TrustedInput_ERROR_CREATE_THREAD INT32_C(19)
#define TrustedInput_ERROR_WRITE_CONTROLFD INT32_C(20)
#define TrustedInput_ERROR_WRITE_ABORTFD INT32_C(21)
#define TrustedInput_ERROR_INVALID_FINGER_NUM INT32_C(22)
#define TrustedInput_ERROR_POLL_IS_STILL_ACTIVE INT32_C(23)
#define TrustedInput_ERROR_TOUCH_SESSION_ACTIVE INT32_C(24)
#define TrustedInput_ERROR_TOUCH_SESSION_INACTIVE INT32_C(25)
#define TrustedInput_ERROR_INVALID_SCREEN_X_Y_INFO INT32_C(26)
#define TrustedInput_ERROR_INVALID_MAX_X_Y INT32_C(27)
#define TrustedInput_ERROR_INVALID_DISPLAY_TYPE INT32_C(28)

#define TrustedInput_OP_init 0
#define TrustedInput_OP_terminate 1
#define TrustedInput_OP_getInput 2
#define TrustedInput_OP_registerCallback 3
#define TrustedInput_OP_deregisterCallback 4

static inline int32_t
TrustedInput_release(Object self)
{
  return Object_invoke(self, Object_OP_release, 0, 0);
}

static inline int32_t
TrustedInput_retain(Object self)
{
  return Object_invoke(self, Object_OP_retain, 0, 0);
}

static inline int32_t
TrustedInput_init(Object self, uint32_t displayType_val, uint32_t screenX_val, uint32_t screenY_val)
{
  ObjectArg a[1]={{{0,0}}};
  struct {
    uint32_t m_displayType;
    uint32_t m_screenX;
    uint32_t m_screenY;
  } i;
  a[0].b = (ObjectBuf) { &i, 12 };
  i.m_displayType = displayType_val;
  i.m_screenX = screenX_val;
  i.m_screenY = screenY_val;

  return Object_invoke(self, TrustedInput_OP_init, a, ObjectCounts_pack(1, 0, 0, 0));
}

static inline int32_t
TrustedInput_terminate(Object self)
{
  return Object_invoke(self, TrustedInput_OP_terminate, 0, 0);
}

static inline int32_t
TrustedInput_getInput(Object self, int32_t timeout_val)
{
  ObjectArg a[1]={{{0,0}}};
  a[0].b = (ObjectBuf) { &timeout_val, sizeof(int32_t) };

  return Object_invoke(self, TrustedInput_OP_getInput, a, ObjectCounts_pack(1, 0, 0, 0));
}

static inline int32_t
TrustedInput_registerCallback(Object self, Object TrustedInputCBO_val)
{
  ObjectArg a[1]={{{0,0}}};
  a[0].o = TrustedInputCBO_val;

  return Object_invoke(self, TrustedInput_OP_registerCallback, a, ObjectCounts_pack(0, 0, 1, 0));
}

static inline int32_t
TrustedInput_deregisterCallback(Object self)
{
  return Object_invoke(self, TrustedInput_OP_deregisterCallback, 0, 0);
}



