/** @file ITMemoryService.idl */
// Copyright (c) 2022-2023 Qualcomm Technologies, Inc.
// All Rights Reserved.
// Confidential and Proprietary - Qualcomm Technologies, Inc.
#pragma once
// AUTOGENERATED FILE: DO NOT EDIT

#include <stdint.h>
#include "object.h"
#include "IMemObject.h"
#include "ITAccessPermissions.h"
#include "ITMemoryService.h"

#define ITMemPool_DEFINE_INVOKE(func, prefix, type) \
  int32_t func(ObjectCxt h, ObjectOp op, ObjectArg *a, ObjectCounts k) \
  { \
    type me = (type) h; \
    switch (ObjectOp_methodID(op)) { \
      case Object_OP_release: { \
        if (k != ObjectCounts_pack(0, 0, 0, 0)) { \
          break; \
        } \
        return prefix##release(me); \
      } \
      case Object_OP_retain: { \
        if (k != ObjectCounts_pack(0, 0, 0, 0)) { \
          break; \
        } \
        return prefix##retain(me); \
      } \
      case ITMemPool_OP_allocateBuffer: { \
        if (k != ObjectCounts_pack(1, 0, 0, 1) || \
          a[0].b.size != 4) { \
          break; \
        } \
        const uint32_t *size_ptr = (const uint32_t*)a[0].b.ptr; \
        return prefix##allocateBuffer(me, *size_ptr, &a[1].o); \
      } \
    } \
    return Object_ERROR_INVALID; \
  }

#define ITMemPoolFactory_DEFINE_INVOKE(func, prefix, type) \
  int32_t func(ObjectCxt h, ObjectOp op, ObjectArg *a, ObjectCounts k) \
  { \
    type me = (type) h; \
    switch (ObjectOp_methodID(op)) { \
      case Object_OP_release: { \
        if (k != ObjectCounts_pack(0, 0, 0, 0)) { \
          break; \
        } \
        return prefix##release(me); \
      } \
      case Object_OP_retain: { \
        if (k != ObjectCounts_pack(0, 0, 0, 0)) { \
          break; \
        } \
        return prefix##retain(me); \
      } \
      case ITMemPoolFactory_OP_createPool: { \
        if (k != ObjectCounts_pack(2, 0, 0, 1) || \
          a[0].b.size != 168 || \
          a[1].b.size != 4) { \
          break; \
        } \
        const ITAccessPermissions_rules *confRules_ptr = (const ITAccessPermissions_rules*)a[0].b.ptr; \
        const uint32_t *size_ptr = (const uint32_t*)a[1].b.ptr; \
        return prefix##createPool(me, confRules_ptr, *size_ptr, &a[2].o); \
      } \
    } \
    return Object_ERROR_INVALID; \
  }

#define ITAccessControl_DEFINE_INVOKE(func, prefix, type) \
  int32_t func(ObjectCxt h, ObjectOp op, ObjectArg *a, ObjectCounts k) \
  { \
    type me = (type) h; \
    switch (ObjectOp_methodID(op)) { \
      case Object_OP_release: { \
        if (k != ObjectCounts_pack(0, 0, 0, 0)) { \
          break; \
        } \
        return prefix##release(me); \
      } \
      case Object_OP_retain: { \
        if (k != ObjectCounts_pack(0, 0, 0, 0)) { \
          break; \
        } \
        return prefix##retain(me); \
      } \
      case ITAccessControl_OP_acquireLock: { \
        if (k != ObjectCounts_pack(1, 0, 1, 1) || \
          a[0].b.size != 168) { \
          break; \
        } \
        const ITAccessPermissions_rules *confRules_ptr = (const ITAccessPermissions_rules*)a[0].b.ptr; \
        return prefix##acquireLock(me, confRules_ptr, a[1].o, &a[2].o); \
      } \
    } \
    return Object_ERROR_INVALID; \
  }


