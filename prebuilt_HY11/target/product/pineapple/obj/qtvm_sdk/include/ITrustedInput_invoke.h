/*===================================================================================
  Copyright (c) 2020 - 2021, 2023 Qualcomm Technologies, Inc.
  All Rights Reserved.
  Confidential and Proprietary - Qualcomm Technologies, Inc.
  ===================================================================================*/
/*===================================================================================
FILE:  ITrustedInput.idl

DESCRIPTION:  This file contains interface for invoking the TrustedInput
interface.
1) To register VMClientApp Callback object.
2) VMClientApp to call getInput with the timeout period.

=====================================================================================*/
#pragma once
// AUTOGENERATED FILE: DO NOT EDIT

#include <stdint.h>
#include "object.h"
#include "ITrustedInputCallBack.h"
#include "ITrustedInput.h"

#define TrustedInput_DEFINE_INVOKE(func, prefix, type) \
  int32_t func(ObjectCxt h, ObjectOp op, ObjectArg *a, ObjectCounts k) \
  { \
    type me = (type) h; \
    switch (ObjectOp_methodID(op)) { \
      case Object_OP_release: { \
        if (k != ObjectCounts_pack(0, 0, 0, 0)) { \
          break; \
        } \
        return prefix##release(me); \
      } \
      case Object_OP_retain: { \
        if (k != ObjectCounts_pack(0, 0, 0, 0)) { \
          break; \
        } \
        return prefix##retain(me); \
      } \
      case TrustedInput_OP_init: { \
        if (k != ObjectCounts_pack(1, 0, 0, 0) || \
          a[0].b.size != 12) { \
          break; \
        } \
        const struct { \
          uint32_t m_displayType; \
          uint32_t m_screenX; \
          uint32_t m_screenY; \
        } *i = a[0].b.ptr; \
        return prefix##init(me, i->m_displayType, i->m_screenX, i->m_screenY); \
      } \
      case TrustedInput_OP_terminate: { \
        if (k != ObjectCounts_pack(0, 0, 0, 0)) { \
          break; \
        } \
        return prefix##terminate(me); \
      } \
      case TrustedInput_OP_getInput: { \
        if (k != ObjectCounts_pack(1, 0, 0, 0) || \
          a[0].b.size != 4) { \
          break; \
        } \
        const int32_t *timeout_ptr = (const int32_t*)a[0].b.ptr; \
        return prefix##getInput(me, *timeout_ptr); \
      } \
      case TrustedInput_OP_registerCallback: { \
        if (k != ObjectCounts_pack(0, 0, 1, 0)) { \
          break; \
        } \
        return prefix##registerCallback(me, a[0].o); \
      } \
      case TrustedInput_OP_deregisterCallback: { \
        if (k != ObjectCounts_pack(0, 0, 0, 0)) { \
          break; \
        } \
        return prefix##deregisterCallback(me); \
      } \
    } \
    return Object_ERROR_INVALID; \
  }


