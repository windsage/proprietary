/*===================================================================================
  Copyright (c) 2020 Qualcomm Technologies, Inc.
  All Rights Reserved.
  Confidential and Proprietary - Qualcomm Technologies, Inc.
  ===================================================================================*/
/*===================================================================================
FILE:  ITrustedInputCallBack.idl

DESCRIPTION:  This file contains interface to the VMClientApp and is used
by TrustedInput to either share the touchdata or indicate that it has timed-out
without any touch events or notify any error.

=====================================================================================*/
#pragma once
// AUTOGENERATED FILE: DO NOT EDIT

#include <stdint.h>
#include "object.h"
#include "ITrustedInputCallBack.h"

#define TrustedInputCallBack_DEFINE_INVOKE(func, prefix, type) \
  int32_t func(ObjectCxt h, ObjectOp op, ObjectArg *a, ObjectCounts k) \
  { \
    type me = (type) h; \
    switch (ObjectOp_methodID(op)) { \
      case Object_OP_release: { \
        if (k != ObjectCounts_pack(0, 0, 0, 0)) { \
          break; \
        } \
        return prefix##release(me); \
      } \
      case Object_OP_retain: { \
        if (k != ObjectCounts_pack(0, 0, 0, 0)) { \
          break; \
        } \
        return prefix##retain(me); \
      } \
      case TrustedInputCallBack_OP_notifyInput: { \
        if (k != ObjectCounts_pack(1, 0, 0, 0)) { \
          break; \
        } \
        const void *inputData_ptr = (const void*)a[0].b.ptr; \
        size_t inputData_len = a[0].b.size / 1; \
        return prefix##notifyInput(me, inputData_ptr, inputData_len); \
      } \
      case TrustedInputCallBack_OP_notifyTimeout: { \
        if (k != ObjectCounts_pack(0, 0, 0, 0)) { \
          break; \
        } \
        return prefix##notifyTimeout(me); \
      } \
      case TrustedInputCallBack_OP_notifyError: { \
        if (k != ObjectCounts_pack(1, 0, 0, 0) || \
          a[0].b.size != 4) { \
          break; \
        } \
        const int32_t *error_ptr = (const int32_t*)a[0].b.ptr; \
        return prefix##notifyError(me, *error_ptr); \
      } \
    } \
    return Object_ERROR_INVALID; \
  }


