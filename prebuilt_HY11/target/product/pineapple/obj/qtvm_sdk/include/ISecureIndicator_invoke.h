/*===================================================================================
  Copyright (c) 2020, 2022-2023 Qualcomm Technologies, Inc.
  All Rights Reserved.
  Confidential and Proprietary - Qualcomm Technologies, Inc.
  ===================================================================================*/
/** @cond */
#pragma once
// AUTOGENERATED FILE: DO NOT EDIT

#include <stdint.h>
#include "object.h"
#include "ISecureIndicator.h"

#define ISecureIndicator_DEFINE_INVOKE(func, prefix, type) \
  int32_t func(ObjectCxt h, ObjectOp op, ObjectArg *a, ObjectCounts k) \
  { \
    type me = (type) h; \
    switch (ObjectOp_methodID(op)) { \
      case Object_OP_release: { \
        if (k != ObjectCounts_pack(0, 0, 0, 0)) { \
          break; \
        } \
        return prefix##release(me); \
      } \
      case Object_OP_retain: { \
        if (k != ObjectCounts_pack(0, 0, 0, 0)) { \
          break; \
        } \
        return prefix##retain(me); \
      } \
      case ISecureIndicator_OP_isIndicatorProvisioned: { \
        if (k != ObjectCounts_pack(0, 1, 0, 0) || \
          a[0].b.size != 4) { \
          break; \
        } \
        uint32_t *isProvisioned_ptr = (uint32_t*)a[0].b.ptr; \
        return prefix##isIndicatorProvisioned(me, isProvisioned_ptr); \
      } \
      case ISecureIndicator_OP_getMaxIndicatorResolution: { \
        if (k != ObjectCounts_pack(0, 1, 0, 0) || \
          a[0].b.size != 8) { \
          break; \
        } \
        struct { \
          uint32_t m_maxWidth; \
          uint32_t m_maxHeight; \
        } *o = a[0].b.ptr; \
        return prefix##getMaxIndicatorResolution(me, &o->m_maxWidth, &o->m_maxHeight); \
      } \
      case ISecureIndicator_OP_setMaxIndicatorResolution: { \
        if (k != ObjectCounts_pack(1, 0, 0, 0) || \
          a[0].b.size != 8) { \
          break; \
        } \
        const struct { \
          uint32_t m_maxWidth; \
          uint32_t m_maxHeight; \
        } *i = a[0].b.ptr; \
        return prefix##setMaxIndicatorResolution(me, i->m_maxWidth, i->m_maxHeight); \
      } \
      case ISecureIndicator_OP_storeIndicator: { \
        if (k != ObjectCounts_pack(1, 0, 0, 0)) { \
          break; \
        } \
        const void *indicator_ptr = (const void*)a[0].b.ptr; \
        size_t indicator_len = a[0].b.size / 1; \
        return prefix##storeIndicator(me, indicator_ptr, indicator_len); \
      } \
      case ISecureIndicator_OP_getIndicator: { \
        if (k != ObjectCounts_pack(0, 1, 0, 0)) { \
          break; \
        } \
        void *indicator_ptr = (void*)a[0].b.ptr; \
        size_t indicator_len = a[0].b.size / 1; \
        int32_t r = prefix##getIndicator(me, indicator_ptr, indicator_len, &indicator_len); \
        a[0].b.size = indicator_len * 1; \
        return r; \
      } \
      case ISecureIndicator_OP_removeIndicator: { \
        if (k != ObjectCounts_pack(0, 0, 0, 0)) { \
          break; \
        } \
        return prefix##removeIndicator(me); \
      } \
    } \
    return Object_ERROR_INVALID; \
  }


