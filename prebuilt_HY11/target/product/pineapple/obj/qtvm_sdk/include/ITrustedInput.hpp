#pragma once
/*===================================================================================
  Copyright (c) 2020 - 2021, 2023 Qualcomm Technologies, Inc.
  All Rights Reserved.
  Confidential and Proprietary - Qualcomm Technologies, Inc.
  ===================================================================================*/

/*===================================================================================
FILE:  ITrustedInput.idl

DESCRIPTION:  This file contains interface for invoking the TrustedInput
interface.
1) To register VMClientApp Callback object.
2) VMClientApp to call getInput with the timeout period.

=====================================================================================*/

// AUTOGENERATED FILE: DO NOT EDIT

#include <cstdint>
#include "object.h"
#include "proxy_base.hpp"
#include "ITrustedInputCallBack.hpp"

class ITrustedInput {
   public:
    static const uint32_t SUCCESS = UINT32_C(0);

    static const int32_t ERROR_ACCESS_CONTROLFD = INT32_C(10);
    static const int32_t ERROR_OPEN_CONTROLFD = INT32_C(11);
    static const int32_t ERROR_OPEN_TOUCHDATAFD = INT32_C(12);
    static const int32_t ERROR_READ_DEVICENODE = INT32_C(13);
    static const int32_t ERROR_GET_DEVICENODE = INT32_C(14);
    static const int32_t ERROR_INVALID_TOUCH_DEVICENODE = INT32_C(15);
    static const int32_t ERROR_IOCTL_TOUCHDATAFD = INT32_C(16);
    static const int32_t ERROR_READ_FAILED = INT32_C(17);
    static const int32_t ERROR_REGISTER_CBO = INT32_C(18);
    static const int32_t ERROR_CREATE_THREAD = INT32_C(19);
    static const int32_t ERROR_WRITE_CONTROLFD = INT32_C(20);
    static const int32_t ERROR_WRITE_ABORTFD = INT32_C(21);
    static const int32_t ERROR_INVALID_FINGER_NUM = INT32_C(22);
    static const int32_t ERROR_POLL_IS_STILL_ACTIVE = INT32_C(23);
    static const int32_t ERROR_TOUCH_SESSION_ACTIVE = INT32_C(24);
    static const int32_t ERROR_TOUCH_SESSION_INACTIVE = INT32_C(25);
    static const int32_t ERROR_INVALID_SCREEN_X_Y_INFO = INT32_C(26);
    static const int32_t ERROR_INVALID_MAX_X_Y = INT32_C(27);
    static const int32_t ERROR_INVALID_DISPLAY_TYPE = INT32_C(28);

    virtual ~ITrustedInput() {}

    virtual int32_t init(uint32_t displayType_val, uint32_t screenX_val, uint32_t screenY_val) = 0;
    virtual int32_t terminate() = 0;
    virtual int32_t getInput(int32_t timeout_val) = 0;
    virtual int32_t registerCallback(const TrustedInputCallBack &TrustedInputCBO_ref) = 0;
    virtual int32_t deregisterCallback() = 0;

   protected:
    static const ObjectOp OP_init = 0;
    static const ObjectOp OP_terminate = 1;
    static const ObjectOp OP_getInput = 2;
    static const ObjectOp OP_registerCallback = 3;
    static const ObjectOp OP_deregisterCallback = 4;
};

class TrustedInput : public ITrustedInput, public ProxyBase {
   public:
    TrustedInput() {}
    TrustedInput(Object impl) : ProxyBase(impl) {}
    virtual ~TrustedInput() {}

    virtual int32_t init(uint32_t displayType_val, uint32_t screenX_val, uint32_t screenY_val) {
        ObjectArg a[1]={{{0,0}}};
        struct s1 {
            uint32_t m_displayType;
            uint32_t m_screenX;
            uint32_t m_screenY;
        } i;
        a[0].b = (ObjectBuf) {&i, 12};
        i.m_displayType = displayType_val;
        i.m_screenX = screenX_val;
        i.m_screenY = screenY_val;

        return invoke(OP_init, a, ObjectCounts_pack(1, 0, 0, 0));
    }

    virtual int32_t terminate() {
        return invoke(OP_terminate, 0, 0);
    }

    virtual int32_t getInput(int32_t timeout_val) {
        ObjectArg a[1]={{{0,0}}};
        a[0].b = (ObjectBuf) {&timeout_val, sizeof(int32_t)};

        return invoke(OP_getInput, a, ObjectCounts_pack(1, 0, 0, 0));
    }

    virtual int32_t registerCallback(const TrustedInputCallBack &TrustedInputCBO_ref) {
        ObjectArg a[1]={{{0,0}}};
        a[0].o = TrustedInputCBO_ref.get();

        return invoke(OP_registerCallback, a, ObjectCounts_pack(0, 0, 1, 0));
    }

    virtual int32_t deregisterCallback() {
        return invoke(OP_deregisterCallback, 0, 0);
    }

};

