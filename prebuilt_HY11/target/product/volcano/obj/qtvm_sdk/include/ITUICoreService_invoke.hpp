#pragma once
/**============================================================================
 * Copyright (c) 2020, 2022 Qualcomm Technologies, Inc.
 * All Rights Reserved.
 * Confidential and Proprietary - Qualcomm Technologies, Inc.
 ============================================================================*/

/** @file  ITUICoreService.idl */

/**
 * @brief
 * TUICoreService interface provides methods to create Trusted UI Session and to
 * register input service
 * VM-APP/Input service are the client interfaces
 */

// AUTOGENERATED FILE: DO NOT EDIT

#include <cstdint>
#include "object.h"
#include "proxy_base.hpp"
#include "impl_base.hpp"
#include "ITUICoreService.hpp"
#include "ITrustedInputCallBack.hpp"
#include "ITUISessionCallBack.hpp"
#include "ITUISystemSession.hpp"

class TUICoreServiceImplBase : protected ImplBase, public ITUICoreService {
   public:
    TUICoreServiceImplBase() {}
    virtual ~TUICoreServiceImplBase() {}

   protected:
    virtual int32_t invoke(ObjectOp op, ObjectArg* a, ObjectCounts k) {
        switch (ObjectOp_methodID(op)) {
            case OP_createSession: {
                if (k != ObjectCounts_pack(1, 0, 2, 1) ||
                    a[0].b.size != 28) {
                    break;
                }
                const TUICreateConfig* cfg_ptr = (const TUICreateConfig*)a[0].b.ptr;
                TrustedInputCallBack p_InputCBO(a[1].o);
                TUISessionCallBack p_TUISessionCBO(a[2].o);
                TUISystemSession p_TUIsessionObj;
                int32_t r = createSession(*cfg_ptr, p_InputCBO, p_TUISessionCBO, p_TUIsessionObj);
                p_InputCBO.extract();
                p_TUISessionCBO.extract();
                a[3].o=p_TUIsessionObj.extract();
                return r;
            }
            case OP_deleteSession: {
                if (k != ObjectCounts_pack(0, 0, 1, 0)) {
                    break;
                }
                TUISystemSession p_TUIsessionObj(a[0].o);
                int32_t r = deleteSession(p_TUIsessionObj);
                p_TUIsessionObj.extract();
                return r;
            }
            default: { return Object_ERROR_INVALID; }
        }
        return Object_ERROR_INVALID;
    }
};

