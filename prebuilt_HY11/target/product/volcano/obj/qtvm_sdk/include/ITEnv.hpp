#pragma once
/** @file ITEnv.idl */

// Copyright (c) 2022-2023 Qualcomm Technologies, Inc.

// All Rights Reserved.

// Confidential and Proprietary - Qualcomm Technologies, Inc.

// AUTOGENERATED FILE: DO NOT EDIT

#include <cstdint>
#include "object.h"
#include "proxy_base.hpp"
#include "IOpener.hpp"

class IITEnv : public IIOpener {
   public:
    static const int32_t ERROR_NOT_FOUND = INT32_C(10);
    static const int32_t ERROR_PRIVILEGE = INT32_C(11);
    static const int32_t ERROR_NOT_SUPPORTED = INT32_C(12);
    static const int32_t ERROR_LOCAL_EXCLUSIVE = INT32_C(13);
    static const int32_t ERROR_EMBED_RETRY = INT32_C(14);
    static const int32_t ERROR_EMBED_MISSING_PROPERTY = INT32_C(15);

    virtual ~IITEnv() {}


   protected:
};

class ITEnv : public IITEnv, public ProxyBase {
   public:
    ITEnv() {}
    ITEnv(Object impl) : ProxyBase(impl) {}
    virtual ~ITEnv() {}

    virtual int32_t open(uint32_t id_val, ProxyBase &obj_ref) {
        ObjectArg a[2]={{{0,0}}};
        a[0].b = (ObjectBuf) {&id_val, sizeof(uint32_t)};

        int32_t result = invoke(OP_open, a, ObjectCounts_pack(1, 0, 0, 1));
        if (Object_OK != result) { return result; }

        obj_ref.consume(a[1].o);

        return result;
    }

};

