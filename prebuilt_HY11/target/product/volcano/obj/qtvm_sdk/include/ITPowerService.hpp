#pragma once
/** @file IPowerService.idl */

// Copyright (c) 2023 Qualcomm Technologies, Inc.

// All Rights Reserved.

// Confidential and Proprietary - Qualcomm Technologies, Inc.

/**
  ITWakeLock provides wakeLock Object.
*/

/** @cond */

// AUTOGENERATED FILE: DO NOT EDIT

#include <cstdint>
#include "object.h"
#include "proxy_base.hpp"

class IITWakeLock {
   public:
    virtual ~IITWakeLock() {}


   protected:
};

class ITWakeLock : public IITWakeLock, public ProxyBase {
   public:
    ITWakeLock() {}
    ITWakeLock(Object impl) : ProxyBase(impl) {}
    virtual ~ITWakeLock() {}

};
class IITPowerService {
   public:
    static const int32_t ERROR_GET_WAKELOCK = INT32_C(10);

    virtual ~IITPowerService() {}

    virtual int32_t acquireWakeLock(ITWakeLock &wakeLockObj_ref) = 0;

   protected:
    static const ObjectOp OP_acquireWakeLock = 0;
};

class ITPowerService : public IITPowerService, public ProxyBase {
   public:
    ITPowerService() {}
    ITPowerService(Object impl) : ProxyBase(impl) {}
    virtual ~ITPowerService() {}

    virtual int32_t acquireWakeLock(ITWakeLock &wakeLockObj_ref) {
        ObjectArg a[1]={{{0,0}}};

        int32_t result = invoke(OP_acquireWakeLock, a, ObjectCounts_pack(0, 0, 0, 1));
        if (Object_OK != result) { return result; }

        wakeLockObj_ref.consume(a[0].o);

        return result;
    }

};

