#pragma once
/*
 * Copyright (c) 2020, 2022 Qualcomm Technologies, Inc.
 * All Rights Reserved.
 * Confidential and Proprietary - Qualcomm Technologies, Inc.
 */

/** @file  ITrustedUIApp.idl */

/**
 * @brief
 * TrustedUIApp interface provides methods to start a TrustedUI session in the
 * TEE (Trusted Execute Environment)
 */

// AUTOGENERATED FILE: DO NOT EDIT

#include <cstdint>
#include "object.h"
#include "proxy_base.hpp"
#include "types.hpp"
#include "IHLOSListenerCBO.hpp"

class ITrustedUIApp {
   public:
    virtual ~ITrustedUIApp() {}

    virtual int32_t createSession(uint32_t displayId_val, uint32_t inputMethod_val, const HLOSListenerCBO &HLOSCbo_ref) = 0;
    virtual int32_t startSession(const TUIConfig &TUIconf_ref) = 0;
    virtual int32_t stopSession() = 0;
    virtual int32_t deleteSession() = 0;
    virtual int32_t handleCmd(const void* cmd_ptr, size_t cmd_len, void* response_ptr, size_t response_len, size_t* response_lenout) = 0;
    virtual int32_t handleCmdLargeData(const IMemObject &cmd_ref, void* response_ptr, size_t response_len, size_t* response_lenout) = 0;

   protected:
    static const ObjectOp OP_createSession = 0;
    static const ObjectOp OP_startSession = 1;
    static const ObjectOp OP_stopSession = 2;
    static const ObjectOp OP_deleteSession = 3;
    static const ObjectOp OP_handleCmd = 4;
    static const ObjectOp OP_handleCmdLargeData = 5;
};

class TrustedUIApp : public ITrustedUIApp, public ProxyBase {
   public:
    TrustedUIApp() {}
    TrustedUIApp(Object impl) : ProxyBase(impl) {}
    virtual ~TrustedUIApp() {}

    virtual int32_t createSession(uint32_t displayId_val, uint32_t inputMethod_val, const HLOSListenerCBO &HLOSCbo_ref) {
        ObjectArg a[2]={{{0,0}}};
        struct s1 {
            uint32_t m_displayId;
            uint32_t m_inputMethod;
        } i;
        a[0].b = (ObjectBuf) {&i, 8};
        i.m_displayId = displayId_val;
        i.m_inputMethod = inputMethod_val;
        a[1].o = HLOSCbo_ref.get();

        return invoke(OP_createSession, a, ObjectCounts_pack(1, 0, 1, 0));
    }

    virtual int32_t startSession(const TUIConfig &TUIconf_ref) {
        ObjectArg a[1]={{{0,0}}};
        a[0].bi = (ObjectBufIn) {&TUIconf_ref, sizeof(TUIConfig)};

        return invoke(OP_startSession, a, ObjectCounts_pack(1, 0, 0, 0));
    }

    virtual int32_t stopSession() {
        return invoke(OP_stopSession, 0, 0);
    }

    virtual int32_t deleteSession() {
        return invoke(OP_deleteSession, 0, 0);
    }

    virtual int32_t handleCmd(const void* cmd_ptr, size_t cmd_len, void* response_ptr, size_t response_len, size_t* response_lenout) {
        ObjectArg a[2]={{{0,0}}};
        a[0].bi = (ObjectBufIn) {cmd_ptr, cmd_len * 1};
        a[1].b = (ObjectBuf) {response_ptr, response_len * 1};

        int32_t result = invoke(OP_handleCmd, a, ObjectCounts_pack(1, 1, 0, 0));
        if (Object_OK != result) { return result; }

        *response_lenout = a[1].b.size / 1;

        return result;
    }

    virtual int32_t handleCmdLargeData(const IMemObject &cmd_ref, void* response_ptr, size_t response_len, size_t* response_lenout) {
        ObjectArg a[2]={{{0,0}}};
        a[1].o = cmd_ref.get();
        a[0].b = (ObjectBuf) {response_ptr, response_len * 1};

        int32_t result = invoke(OP_handleCmdLargeData, a, ObjectCounts_pack(0, 1, 1, 0));
        if (Object_OK != result) { return result; }

        *response_lenout = a[0].b.size / 1;

        return result;
    }

};

