/**============================================================================
 * Copyright (c) 2020, 2022 Qualcomm Technologies, Inc.
 * All Rights Reserved.
 * Confidential and Proprietary - Qualcomm Technologies, Inc.
 ============================================================================*/
/** @file  ITUISystemSession.idl */
/**
 * @brief
 * TUISystemSession interface provides methods needed for TUI Session
 */
#pragma once
// AUTOGENERATED FILE: DO NOT EDIT

#include <stdint.h>
#include "object.h"
#include "IMemObject.h"
#include "ITUITypes.h"

#define TUISystemSession_OP_startSession 0
#define TUISystemSession_OP_getDisplayProperties 1
#define TUISystemSession_OP_getColorModes 2
#define TUISystemSession_OP_setColorMode 3
#define TUISystemSession_OP_enqueueBuffer 4
#define TUISystemSession_OP_dequeueBuffer 5
#define TUISystemSession_OP_allocateAppBuffer 6
#define TUISystemSession_OP_freeAppBuffer 7
#define TUISystemSession_OP_getInputData 8
#define TUISystemSession_OP_stopSession 9

static inline int32_t
TUISystemSession_release(Object self)
{
  return Object_invoke(self, Object_OP_release, 0, 0);
}

static inline int32_t
TUISystemSession_retain(Object self)
{
  return Object_invoke(self, Object_OP_retain, 0, 0);
}

static inline int32_t
TUISystemSession_startSession(Object self, int32_t ihandle_val, const displayConfig *cfgInfo_ptr)
{
  ObjectArg a[2]={{{0,0}}};
  a[0].b = (ObjectBuf) { &ihandle_val, sizeof(int32_t) };
  a[1].bi = (ObjectBufIn) { cfgInfo_ptr, sizeof(displayConfig) };

  return Object_invoke(self, TUISystemSession_OP_startSession, a, ObjectCounts_pack(2, 0, 0, 0));
}

static inline int32_t
TUISystemSession_getDisplayProperties(Object self, displayConfig *cfgInfo_ptr)
{
  ObjectArg a[1]={{{0,0}}};
  a[0].b = (ObjectBuf) { cfgInfo_ptr, sizeof(displayConfig) };

  return Object_invoke(self, TUISystemSession_OP_getDisplayProperties, a, ObjectCounts_pack(0, 1, 0, 0));
}

static inline int32_t
TUISystemSession_getColorModes(Object self, displayColorModes *colorModes_ptr)
{
  ObjectArg a[1]={{{0,0}}};
  a[0].b = (ObjectBuf) { colorModes_ptr, sizeof(displayColorModes) };

  return Object_invoke(self, TUISystemSession_OP_getColorModes, a, ObjectCounts_pack(0, 1, 0, 0));
}

static inline int32_t
TUISystemSession_setColorMode(Object self, const displayColorMode *colorMode_ptr)
{
  ObjectArg a[1]={{{0,0}}};
  a[0].bi = (ObjectBufIn) { colorMode_ptr, sizeof(displayColorMode) };

  return Object_invoke(self, TUISystemSession_OP_setColorMode, a, ObjectCounts_pack(1, 0, 0, 0));
}

static inline int32_t
TUISystemSession_enqueueBuffer(Object self, int32_t ihandle_val, const displayConfig *cfgInfo_ptr)
{
  ObjectArg a[2]={{{0,0}}};
  a[0].b = (ObjectBuf) { &ihandle_val, sizeof(int32_t) };
  a[1].bi = (ObjectBufIn) { cfgInfo_ptr, sizeof(displayConfig) };

  return Object_invoke(self, TUISystemSession_OP_enqueueBuffer, a, ObjectCounts_pack(2, 0, 0, 0));
}

static inline int32_t
TUISystemSession_dequeueBuffer(Object self, Object *handle_ptr, int32_t *ihandle_ptr, uint32_t buffSize_val)
{
  ObjectArg a[3]={{{0,0}}};
  a[1].b = (ObjectBuf) { ihandle_ptr, sizeof(int32_t) };
  a[0].b = (ObjectBuf) { &buffSize_val, sizeof(uint32_t) };

  int32_t result = Object_invoke(self, TUISystemSession_OP_dequeueBuffer, a, ObjectCounts_pack(1, 1, 0, 1));

  *handle_ptr = a[2].o;

  return result;
}

static inline int32_t
TUISystemSession_allocateAppBuffer(Object self, uint32_t buffSize_val, Object *handle_ptr, int32_t *ihandle_ptr)
{
  ObjectArg a[3]={{{0,0}}};
  a[0].b = (ObjectBuf) { &buffSize_val, sizeof(uint32_t) };
  a[1].b = (ObjectBuf) { ihandle_ptr, sizeof(int32_t) };

  int32_t result = Object_invoke(self, TUISystemSession_OP_allocateAppBuffer, a, ObjectCounts_pack(1, 1, 0, 1));

  *handle_ptr = a[2].o;

  return result;
}

static inline int32_t
TUISystemSession_freeAppBuffer(Object self, int32_t ihandle_val)
{
  ObjectArg a[1]={{{0,0}}};
  a[0].b = (ObjectBuf) { &ihandle_val, sizeof(int32_t) };

  return Object_invoke(self, TUISystemSession_OP_freeAppBuffer, a, ObjectCounts_pack(1, 0, 0, 0));
}

static inline int32_t
TUISystemSession_getInputData(Object self, int32_t timeout_val)
{
  ObjectArg a[1]={{{0,0}}};
  a[0].b = (ObjectBuf) { &timeout_val, sizeof(int32_t) };

  return Object_invoke(self, TUISystemSession_OP_getInputData, a, ObjectCounts_pack(1, 0, 0, 0));
}

static inline int32_t
TUISystemSession_stopSession(Object self)
{
  return Object_invoke(self, TUISystemSession_OP_stopSession, 0, 0);
}



