#pragma once
/** @file ICredentials.idl */

// Copyright (c) 2022 Qualcomm Technologies, Inc.

// All Rights Reserved.

// Confidential and Proprietary - Qualcomm Technologies, Inc.

/** @cond */

// AUTOGENERATED FILE: DO NOT EDIT

#include <cstdint>
#include "object.h"
#include "proxy_base.hpp"
#include "impl_base.hpp"
#include "ICredentials.hpp"

class ICredentialsImplBase : protected ImplBase, public IICredentials {
   public:
    ICredentialsImplBase() {}
    virtual ~ICredentialsImplBase() {}

   protected:
    virtual int32_t invoke(ObjectOp op, ObjectArg* a, ObjectCounts k) {
        switch (ObjectOp_methodID(op)) {
            case OP_getPropertyByIndex: {
                if (k != ObjectCounts_pack(1, 2, 0, 0) ||
                    a[0].b.size != 4) {
                    break;
                }
                const uint32_t* index_ptr = (const uint32_t*)a[0].b.ptr;
                void* name_ptr = (void*)a[1].b.ptr;
                size_t name_len = a[1].b.size / 1;
                void* value_ptr = (void*)a[2].b.ptr;
                size_t value_len = a[2].b.size / 1;
                int32_t r = getPropertyByIndex(*index_ptr, name_ptr, name_len, &name_len, value_ptr, value_len, &value_len);
                a[1].b.size = name_len * 1;
                a[2].b.size = value_len * 1;
                return r;
            }
            case OP_getValueByName: {
                if (k != ObjectCounts_pack(1, 1, 0, 0)) {
                    break;
                }
                const void* name_ptr = (const void*)a[0].b.ptr;
                size_t name_len = a[0].b.size / 1;
                void* value_ptr = (void*)a[1].b.ptr;
                size_t value_len = a[1].b.size / 1;
                int32_t r = getValueByName(name_ptr, name_len, value_ptr, value_len, &value_len);
                a[1].b.size = value_len * 1;
                return r;
            }
            default: { return Object_ERROR_INVALID; }
        }
        return Object_ERROR_INVALID;
    }
};

