#pragma once
/*===================================================================================
  Copyright (c) 2020 - 2021, 2023 Qualcomm Technologies, Inc.
  All Rights Reserved.
  Confidential and Proprietary - Qualcomm Technologies, Inc.
  ===================================================================================*/

/*===================================================================================
FILE:  ITrustedInput.idl

DESCRIPTION:  This file contains interface for invoking the TrustedInput
interface.
1) To register VMClientApp Callback object.
2) VMClientApp to call getInput with the timeout period.

=====================================================================================*/

// AUTOGENERATED FILE: DO NOT EDIT

#include <cstdint>
#include "object.h"
#include "proxy_base.hpp"
#include "impl_base.hpp"
#include "ITrustedInput.hpp"
#include "ITrustedInputCallBack.hpp"

class TrustedInputImplBase : protected ImplBase, public ITrustedInput {
   public:
    TrustedInputImplBase() {}
    virtual ~TrustedInputImplBase() {}

   protected:
    virtual int32_t invoke(ObjectOp op, ObjectArg* a, ObjectCounts k) {
        switch (ObjectOp_methodID(op)) {
            case OP_init: {
                if (k != ObjectCounts_pack(1, 0, 0, 0) ||
                    a[0].b.size != 12) {
                    break;
                }
                const struct s1 {
                    uint32_t m_displayType;
                    uint32_t m_screenX;
                    uint32_t m_screenY;
                }* i = (const struct s1*)a[0].b.ptr;
                return init(i->m_displayType, i->m_screenX, i->m_screenY);
            }
            case OP_terminate: {
                if (k != ObjectCounts_pack(0, 0, 0, 0)) {
                    break;
                }
                return terminate();
            }
            case OP_getInput: {
                if (k != ObjectCounts_pack(1, 0, 0, 0) ||
                    a[0].b.size != 4) {
                    break;
                }
                const int32_t* timeout_ptr = (const int32_t*)a[0].b.ptr;
                return getInput(*timeout_ptr);
            }
            case OP_registerCallback: {
                if (k != ObjectCounts_pack(0, 0, 1, 0)) {
                    break;
                }
                TrustedInputCallBack p_TrustedInputCBO(a[0].o);
                int32_t r = registerCallback(p_TrustedInputCBO);
                p_TrustedInputCBO.extract();
                return r;
            }
            case OP_deregisterCallback: {
                if (k != ObjectCounts_pack(0, 0, 0, 0)) {
                    break;
                }
                return deregisterCallback();
            }
            default: { return Object_ERROR_INVALID; }
        }
        return Object_ERROR_INVALID;
    }
};

