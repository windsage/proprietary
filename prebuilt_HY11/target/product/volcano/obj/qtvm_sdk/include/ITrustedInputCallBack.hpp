#pragma once
/*===================================================================================
  Copyright (c) 2020 Qualcomm Technologies, Inc.
  All Rights Reserved.
  Confidential and Proprietary - Qualcomm Technologies, Inc.
  ===================================================================================*/

/*===================================================================================
FILE:  ITrustedInputCallBack.idl

DESCRIPTION:  This file contains interface to the VMClientApp and is used
by TrustedInput to either share the touchdata or indicate that it has timed-out
without any touch events or notify any error.

=====================================================================================*/

// AUTOGENERATED FILE: DO NOT EDIT

#include <cstdint>
#include "object.h"
#include "proxy_base.hpp"

class ITrustedInputCallBack {
   public:
    virtual ~ITrustedInputCallBack() {}

    virtual int32_t notifyInput(const void* inputData_ptr, size_t inputData_len) = 0;
    virtual int32_t notifyTimeout() = 0;
    virtual int32_t notifyError(int32_t error_val) = 0;

   protected:
    static const ObjectOp OP_notifyInput = 0;
    static const ObjectOp OP_notifyTimeout = 1;
    static const ObjectOp OP_notifyError = 2;
};

class TrustedInputCallBack : public ITrustedInputCallBack, public ProxyBase {
   public:
    TrustedInputCallBack() {}
    TrustedInputCallBack(Object impl) : ProxyBase(impl) {}
    virtual ~TrustedInputCallBack() {}

    virtual int32_t notifyInput(const void* inputData_ptr, size_t inputData_len) {
        ObjectArg a[1]={{{0,0}}};
        a[0].bi = (ObjectBufIn) {inputData_ptr, inputData_len * 1};

        return invoke(OP_notifyInput, a, ObjectCounts_pack(1, 0, 0, 0));
    }

    virtual int32_t notifyTimeout() {
        return invoke(OP_notifyTimeout, 0, 0);
    }

    virtual int32_t notifyError(int32_t error_val) {
        ObjectArg a[1]={{{0,0}}};
        a[0].b = (ObjectBuf) {&error_val, sizeof(int32_t)};

        return invoke(OP_notifyError, a, ObjectCounts_pack(1, 0, 0, 0));
    }

};

