#pragma once
/*===================================================================================
  Copyright (c) 2020, 2023 Qualcomm Technologies, Inc.
  All Rights Reserved.
  Confidential and Proprietary - Qualcomm Technologies, Inc.
  ===================================================================================*/

/*===================================================================================
FILE:  ITUISessionCallBack.idl

DESCRIPTION:  This file contains interface to the TUISession CallBack, which is
normally called by TUICoreService to notify app of fatal errors and events.

=====================================================================================*/

// AUTOGENERATED FILE: DO NOT EDIT

#include <cstdint>
#include "object.h"
#include "proxy_base.hpp"

class ITUISessionCallBack {
   public:
    static const uint64_t PHONE_STATE_RINGING = UINT64_C(0x1);
    static const uint64_t PHONE_STATE_OFF_HOOK = UINT64_C(0x2);
    static const uint64_t PHONE_STATE_IDLE = UINT64_C(0x4);
    static const uint64_t ACTION_SCREEN_OFF = UINT64_C(0x8);
    static const uint64_t ACTION_SCREEN_ON = UINT64_C(0x10);
    static const uint64_t ACTION_SHUTDOWN = UINT64_C(0x20);
    static const uint64_t ACTION_USER_PRESENT = UINT64_C(0x40);
    static const uint64_t SYSTEM_EVENT_MAX = UINT64_C(0x7FFFFFFF);

    virtual ~ITUISessionCallBack() {}

    virtual int32_t OnEvent(uint64_t event_val) = 0;
    virtual int32_t OnError() = 0;

   protected:
    static const ObjectOp OP_OnEvent = 0;
    static const ObjectOp OP_OnError = 1;
};

class TUISessionCallBack : public ITUISessionCallBack, public ProxyBase {
   public:
    TUISessionCallBack() {}
    TUISessionCallBack(Object impl) : ProxyBase(impl) {}
    virtual ~TUISessionCallBack() {}

    virtual int32_t OnEvent(uint64_t event_val) {
        ObjectArg a[1]={{{0,0}}};
        a[0].b = (ObjectBuf) {&event_val, sizeof(uint64_t)};

        return invoke(OP_OnEvent, a, ObjectCounts_pack(1, 0, 0, 0));
    }

    virtual int32_t OnError() {
        return invoke(OP_OnError, 0, 0);
    }

};

