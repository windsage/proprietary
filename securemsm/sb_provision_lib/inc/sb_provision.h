/**
 * Copyright (c) 2023 Qualcomm Technologies, Inc.
 * All Rights Reserved.
 * Confidential and Proprietary - Qualcomm Technologies, Inc.
 */

#ifndef _SB_PROVISION_H_
#define _SB_PROVISION_H_

#include <stdint.h>

/*
 * Base key size used in QTEE Strongbox service
 */
#define BASE_KEY_SIZE 32

typedef enum {
  /**
   * Success error code
   */
  SB_ERR_SUCCESS = 0,

  /**
   * Failure occurred while establishing connection with QTEE services.
   */
  SB_ERR_COMMUNICATION_ERROR = 10,

  /**
   * Keys have not been generated to save on QTEE by getBasekey() call
   */
  SB_ERR_KEYS_NOT_SELECTED = 11,

  /**
   * Error returned by provisionLock() when keys have not been committed
   * using commitKeys() call.
   */
  SB_ERR_KEYS_NOT_COMMITED = 12,

  /**
   * This status code would be observed if re-provisioning
   * of base keys is attempted on a provisioned locked device.
   */
  SB_ERR_DEVICE_PROVISION_LOCKED = 13,

  /**
   * RPMB storage is not provisioned.
   */
  SB_ERR_RPMB_NOT_PROVISIONED = 14,

  /**
   * Other miscellaneous errors.
   */
  SB_ERR_GENERIC_ERROR = 15
} ErrorCode;

/**
 * @brief helper function to convert error to string
 *
 * @param [n] code error code from #ErrorCode list
 *
 * @returns error code string
 */
inline const char *err2str(int code) {
  switch (code) {
  case SB_ERR_SUCCESS:
    return "SB_ERR_SUCCESS";
  case SB_ERR_COMMUNICATION_ERROR:
    return "SB_ERR_COMMUNICATION_ERROR";
  case SB_ERR_KEYS_NOT_SELECTED:
    return "SB_ERR_KEYS_NOT_SELECTED";
  case SB_ERR_KEYS_NOT_COMMITED:
    return "SB_ERR_KEYS_NOT_COMMITED";
  case SB_ERR_DEVICE_PROVISION_LOCKED:
    return "SB_ERR_DEVICE_PROVISION_LOCKED";
  case SB_ERR_RPMB_NOT_PROVISIONED:
    return "SB_ERR_RPMB_NOT_PROVISIONED";
  case SB_ERR_GENERIC_ERROR:
    return "SB_ERR_GENERIC_ERROR";
  default:
    return "UNKNOWN_ERROR";
  }
  return "UNKNOWN_ERROR";
}

/**
 * @brief Performs sharing of basekey and xor value of K_HMAC, K_ROT and K_IDP
 *        K_HMAC, K_ROT and K_IDP are derived from baseKey based on below
 * protocol KDF: NIST SP800-108  PRF: AES-CMAC with key = baseKey  K_HMAC: KDF
 * (key=baseKey, label=SharedKeyHmac, context=0x00)  K_ROT : KDF (key=BaseKey,
 * label=SharedKeyRoot, context=0x00)  K_IDP : KDF (key=BaseKey,
 * label=SharedKeyIDP, context=0x00) 
 *
 *
 * @param [out] baseKey_ptr 32 Bytes output buffer to contain baseKey from QTEE
 *                          Strongbox service.
 *
 * @param [out] xorData_ptr 32 Bytes output buffer to contain xor value of
 * K_HMAC, K_ROT and K_IDP
 *
 * @pre Device should not be QTEE Strongbox provisioned locked
 *
 * @retval SB_ERR_SUCCESS on success or other value on failure.
 */
int getBaseKey(uint8_t *baseKey_ptr, uint8_t *xorData_ptr);

/**
 * @brief Commit the base key in QTEE
 *
 * @pre basekey should be generated by getBaseKey() call
 *
 * @return  SB_ERR_SUCCESS on success or other value on failure.
 */
int commitKeys();

/**
 * @brief   Performs locking the provisioning of the basekey.
 *          Base keys once locked will no more be replaceable.
 *
 * @pre baseKey should be committed using commitKeys() call
 *
 * @return  SB_ERR_SUCCESS on success or other value on failure.
 */
int provisionLock();

#endif
