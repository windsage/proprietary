#pragma once
// AUTOGENERATED FILE: DO NOT EDIT

#include <stdint.h>
#include "object.h"
#include "ITzdRegister.h"

/***********************************************************
 Copyright (c) 2018 Qualcomm Technologies, Inc.
 All Rights Reserved.
 Confidential and Proprietary - Qualcomm Technologies, Inc.
************************************************************/

/**
 * Interface used to obtain the credentials associated to REE clients registered
 * via SMC Invoke.
 */

/** @cond */

#define ITzdRegister_DEFINE_INVOKE(func, prefix, type) \
  int32_t func(ObjectCxt h, ObjectOp op, ObjectArg *a, ObjectCounts k) \
  { \
    type me = (type) h; \
    switch (ObjectOp_methodID(op)) { \
      case Object_OP_release: { \
        return prefix##release(me); \
      } \
      case Object_OP_retain: { \
        return prefix##retain(me); \
      } \
      case ITzdRegister_OP_getClientEnv: { \
        if (k != ObjectCounts_pack(3, 0, 0, 1)) { \
          break; \
        } \
        const void *clientId_ptr = (const void*) a[0].b.ptr; \
        size_t clientId_len = a[0].b.size / 1; \
        const void *credentials_ptr = (const void*) a[1].b.ptr; \
        size_t credentials_len = a[1].b.size / 1; \
        const uint32_t *whitelist_ptr = (const uint32_t*) a[2].b.ptr; \
        size_t whitelist_len = a[2].b.size / sizeof(uint32_t); \
        return prefix##getClientEnv(me, clientId_ptr, clientId_len, credentials_ptr, credentials_len, whitelist_ptr, whitelist_len, &a[3].o); \
      } \
      case ITzdRegister_OP_getTrustedClientEnv: { \
        if (k != ObjectCounts_pack(2, 0, 0, 1)) { \
          break; \
        } \
        const void *clientId_ptr = (const void*) a[0].b.ptr; \
        size_t clientId_len = a[0].b.size / 1; \
        const void *credentials_ptr = (const void*) a[1].b.ptr; \
        size_t credentials_len = a[1].b.size / 1; \
        return prefix##getTrustedClientEnv(me, clientId_ptr, clientId_len, credentials_ptr, credentials_len, &a[2].o); \
      } \
    } \
    return Object_ERROR_INVALID; \
  }


