/*
 * Copyright (c) 2022 Qualcomm Technologies, Inc.
 * All Rights Reserved.
 * Confidential and Proprietary - Qualcomm Technologies, Inc.
 */
/**
 * This interface is used by clients to get notification from TZ.
 * Clients should pass this interface object to TZ by using \link IPeripheralState \endlink
 * method @ref registerCallBack.
 */
/** @cond */
#pragma once
// AUTOGENERATED FILE: DO NOT EDIT

#include <stdint.h>
#include "object.h"
#include "IPeripheralState.h"

#define IPeripheralStateCB_DEFINE_INVOKE(func, prefix, type) \
  int32_t func(ObjectCxt h, ObjectOp op, ObjectArg *a, ObjectCounts k) \
  { \
    type me = (type) h; \
    switch (ObjectOp_methodID(op)) { \
      case Object_OP_release: { \
        if (k != ObjectCounts_pack(0, 0, 0, 0)) { \
          break; \
        } \
        return prefix##release(me); \
      } \
      case Object_OP_retain: { \
        if (k != ObjectCounts_pack(0, 0, 0, 0)) { \
          break; \
        } \
        return prefix##retain(me); \
      } \
      case IPeripheralStateCB_OP_notifyPeripheralStateChange: { \
        if (k != ObjectCounts_pack(1, 0, 0, 0) || \
          a[0].b.size != 1) { \
          break; \
        } \
        const uint8_t *state_ptr = (const uint8_t*) a[0].b.ptr; \
        return prefix##notifyPeripheralStateChange(me, *state_ptr); \
      } \
    } \
    return Object_ERROR_INVALID; \
  }

#define IPeripheralState_DEFINE_INVOKE(func, prefix, type) \
  int32_t func(ObjectCxt h, ObjectOp op, ObjectArg *a, ObjectCounts k) \
  { \
    type me = (type) h; \
    switch (ObjectOp_methodID(op)) { \
      case Object_OP_release: { \
        if (k != ObjectCounts_pack(0, 0, 0, 0)) { \
          break; \
        } \
        return prefix##release(me); \
      } \
      case Object_OP_retain: { \
        if (k != ObjectCounts_pack(0, 0, 0, 0)) { \
          break; \
        } \
        return prefix##retain(me); \
      } \
      case IPeripheralState_OP_registerCallBack: { \
        if (k != ObjectCounts_pack(1, 0, 1, 0) || \
          a[0].b.size != 4) { \
          break; \
        } \
        const uint32_t *peripheral_ptr = (const uint32_t*) a[0].b.ptr; \
        return prefix##registerCallBack(me, *peripheral_ptr, a[1].o); \
      } \
      case IPeripheralState_OP_getPeripheralState: { \
        if (k != ObjectCounts_pack(1, 1, 0, 0) || \
          a[0].b.size != 4 || \
          a[1].b.size != 1) { \
          break; \
        } \
        const uint32_t *peripheral_ptr = (const uint32_t*) a[0].b.ptr; \
        uint8_t *state_ptr = (uint8_t*) a[1].b.ptr; \
        return prefix##getPeripheralState(me, *peripheral_ptr, state_ptr); \
      } \
    } \
    return Object_ERROR_INVALID; \
  }


