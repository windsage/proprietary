#pragma once
/*
 * Copyright (c) 2021-2023 Qualcomm Technologies, Inc.
 * All Rights Reserved.
 * Confidential and Proprietary - Qualcomm Technologies, Inc.
 */

/** @file  ITrustedReport.idl */

/** @cond */

// AUTOGENERATED FILE: DO NOT EDIT

#include <cstdint>
#include "object.h"
#include "proxy_base.hpp"

class IIRefreshCallback {
   public:
    static const uint32_t REFRESH_SUCCESS = UINT32_C(0);
    static const uint32_t REFRESH_FAILURE = UINT32_C(1);
    static const uint32_t REFRESH_TIMEOUT = UINT32_C(2);

    virtual ~IIRefreshCallback() {}

    virtual int32_t onResponse(uint32_t status_val) = 0;

   protected:
    static const ObjectOp OP_onResponse = 0;
};

class IRefreshCallback : public IIRefreshCallback, public ProxyBase {
   public:
    IRefreshCallback() {}
    IRefreshCallback(Object impl) : ProxyBase(impl) {}
    virtual ~IRefreshCallback() {}

    virtual int32_t onResponse(uint32_t status_val) {
        ObjectArg a[1]={{{0,0}}};
        a[0].b = (ObjectBuf) {&status_val, sizeof(uint32_t)};

        return invoke(OP_onResponse, a, ObjectCounts_pack(1, 0, 0, 0));
    }

};
class IITrustedReport {
   public:
    static const uint64_t TLOC_REPORT = UINT64_C(0x0000000000000001);
    static const uint64_t QSRP_REPORT = UINT64_C(0x0000000000000002);
    static const uint64_t TTIME_REPORT = UINT64_C(0x0000000000000004);
    static const uint64_t CSR_REPORT = UINT64_C(0x0000000000000008);
    static const uint64_t CDR_REPORT = UINT64_C(0x0000000000000010);
    static const uint64_t SMSR_REPORT = UINT64_C(0x0000000000000020);
    static const uint64_t OEM_REPORT = UINT64_C(0x0000000000000040);
    static const uint64_t GOOGLEBCC_REPORT = UINT64_C(0x0000000000000080);
    static const uint64_t PLATFORMBOOT_REPORT = UINT64_C(0x0000000000000100);
    static const uint64_t HLOSBOOT_REPORT = UINT64_C(0x0000000000000200);
    static const uint64_t SECURITY_REPORT = UINT64_C(0x0000000000000400);

    static const int32_t NO_MEMORY = INT32_C(10);
    static const int32_t REPORT_FAILURE = INT32_C(11);
    static const int32_t RESERVED_2 = INT32_C(12);
    static const int32_t INVALID_REPORT_TYPE = INT32_C(13);
    static const int32_t RESERVED_3 = INT32_C(14);
    static const int32_t RESERVED_4 = INT32_C(15);
    static const int32_t INVALID_ARGUMENT = INT32_C(16);

    virtual ~IITrustedReport() {}

    virtual int32_t getStatus(uint64_t reportType_val, void* statusReport_ptr, size_t statusReport_len, size_t* statusReport_lenout) = 0;
    virtual int32_t refresh(uint64_t reportType_val, uint64_t timeout_val, const IRefreshCallback &callback_ref) = 0;
    virtual int32_t getReport(uint64_t reportType_val, void* report_ptr, size_t report_len, size_t* report_lenout) = 0;

   protected:
    static const ObjectOp OP_getStatus = 0;
    static const ObjectOp OP_refresh = 1;
    static const ObjectOp OP_getReport = 2;
};

class ITrustedReport : public IITrustedReport, public ProxyBase {
   public:
    ITrustedReport() {}
    ITrustedReport(Object impl) : ProxyBase(impl) {}
    virtual ~ITrustedReport() {}

    virtual int32_t getStatus(uint64_t reportType_val, void* statusReport_ptr, size_t statusReport_len, size_t* statusReport_lenout) {
        ObjectArg a[2]={{{0,0}}};
        a[0].b = (ObjectBuf) {&reportType_val, sizeof(uint64_t)};
        a[1].b = (ObjectBuf) {statusReport_ptr, statusReport_len * 1};

        int32_t result = invoke(OP_getStatus, a, ObjectCounts_pack(1, 1, 0, 0));
        if (Object_OK != result) { return result; }

        *statusReport_lenout = a[1].b.size / 1;

        return result;
    }

    virtual int32_t refresh(uint64_t reportType_val, uint64_t timeout_val, const IRefreshCallback &callback_ref) {
        ObjectArg a[2]={{{0,0}}};
        struct s1 {
            uint64_t m_reportType;
            uint64_t m_timeout;
        } i;
        a[0].b = (ObjectBuf) {&i, 16};
        i.m_reportType = reportType_val;
        i.m_timeout = timeout_val;
        a[1].o = callback_ref.get();

        return invoke(OP_refresh, a, ObjectCounts_pack(1, 0, 1, 0));
    }

    virtual int32_t getReport(uint64_t reportType_val, void* report_ptr, size_t report_len, size_t* report_lenout) {
        ObjectArg a[2]={{{0,0}}};
        a[0].b = (ObjectBuf) {&reportType_val, sizeof(uint64_t)};
        a[1].b = (ObjectBuf) {report_ptr, report_len * 1};

        int32_t result = invoke(OP_getReport, a, ObjectCounts_pack(1, 1, 0, 0));
        if (Object_OK != result) { return result; }

        *report_lenout = a[1].b.size / 1;

        return result;
    }

};

