#pragma once
/*
 * Copyright (c) 2022 Qualcomm Technologies, Inc.
 * All Rights Reserved.
 * Confidential and Proprietary - Qualcomm Technologies, Inc.
 */

/**
 * This interface is used by clients to get notification from TZ.
 * Clients should pass this interface object to TZ by using \link IPeripheralState \endlink
 * method @ref registerCallBack.
 */

/** @cond */

// AUTOGENERATED FILE: DO NOT EDIT

#include <cstdint>
#include "object.h"
#include "proxy_base.hpp"
#include "impl_base.hpp"
#include "IPeripheralState.hpp"

class IPeripheralStateCBImplBase : protected ImplBase, public IIPeripheralStateCB {
   public:
    IPeripheralStateCBImplBase() {}
    virtual ~IPeripheralStateCBImplBase() {}

   protected:
    virtual int32_t invoke(ObjectOp op, ObjectArg* a, ObjectCounts k) {
        switch (ObjectOp_methodID(op)) {
            case OP_notifyPeripheralStateChange: {
                if (k != ObjectCounts_pack(1, 0, 0, 0) ||
                    a[0].b.size != 1) {
                    break;
                }
                const uint8_t* state_ptr = (const uint8_t*)a[0].b.ptr;
                return notifyPeripheralStateChange(*state_ptr);
            }
            default: { return Object_ERROR_INVALID; }
        }
        return Object_ERROR_INVALID;
    }
};
class IPeripheralStateImplBase : protected ImplBase, public IIPeripheralState {
   public:
    IPeripheralStateImplBase() {}
    virtual ~IPeripheralStateImplBase() {}

   protected:
    virtual int32_t invoke(ObjectOp op, ObjectArg* a, ObjectCounts k) {
        switch (ObjectOp_methodID(op)) {
            case OP_registerCallBack: {
                if (k != ObjectCounts_pack(1, 0, 1, 0) ||
                    a[0].b.size != 4) {
                    break;
                }
                const uint32_t* peripheral_ptr = (const uint32_t*)a[0].b.ptr;
                ProxyBase p_periStateCB(a[1].o);
                int32_t r = registerCallBack(*peripheral_ptr, p_periStateCB);
                p_periStateCB.extract();
                return r;
            }
            case OP_getPeripheralState: {
                if (k != ObjectCounts_pack(1, 1, 0, 0) ||
                    a[0].b.size != 4 ||
                    a[1].b.size != 1) {
                    break;
                }
                const uint32_t* peripheral_ptr = (const uint32_t*)a[0].b.ptr;
                uint8_t* state_ptr = (uint8_t*)a[1].b.ptr;
                return getPeripheralState(*peripheral_ptr, state_ptr);
            }
            default: { return Object_ERROR_INVALID; }
        }
        return Object_ERROR_INVALID;
    }
};

