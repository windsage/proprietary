#pragma once
// Copyright (c) 2022 Qualcomm Technologies, Inc.
// All Rights Reserved.
// Confidential and Proprietary - Qualcomm Technologies, Inc.

/** @cond */

// AUTOGENERATED FILE: DO NOT EDIT

#include <cstdint>
#include "object.h"
#include "proxy_base.hpp"

class IIDiagFuseService {
   public:
    static const int32_t SECBOOT_TOOL_TZ_SUCCESS = INT32_C(10);
    static const int32_t SECBOOT_TOOL_TZ_FAILURE = INT32_C(11);
    static const int32_t SECBOOT_TOOL_TZ_ERR_TOOL_NOT_SUPPORTED = INT32_C(12);
    static const int32_t SECBOOT_TOOL_TZ_ERR_INVALID_RSP_PKT = INT32_C(13);
    static const int32_t SECBOOT_TOOL_TZ_ERR_INVALID_RSP_PKT_SIZE = INT32_C(14);
    static const int32_t SECBOOT_TOOL_TZ_ERR_INVALID_REQ_PKT = INT32_C(15);
    static const int32_t SECBOOT_TOOL_TZ_ERR_INVALID_REQ_PKT_SIZE = INT32_C(16);
    static const int32_t SECBOOT_TOOL_TZ_ERR_INVALID_OPERATION_ID = INT32_C(17);
    static const int32_t SECBOOT_TOOL_TZ_ERR_INVALID_FEATURE_ID = INT32_C(18);
    static const int32_t SECBOOT_TOOL_TZ_ERR_INVALID_RSP_PAYLOAD_TYPE = INT32_C(19);
    static const int32_t SECBOOT_TOOL_TZ_ERR_MEMORY_ALLOC_FAILED = INT32_C(20);
    static const int32_t SECBOOT_TOOL_TZ_ERR_FEAT_SECELF_COMP_NOT_SUPPORTED = INT32_C(21);
    static const int32_t SECBOOT_TOOL_TZ_ERR_FEAT_SECELF_COMP_INVALID_ADDRESS = INT32_C(22);
    static const int32_t SECBOOT_TOOL_TZ_ERR_FEAT_SECELF_COMP_INVALID_NO_OF_ENTRIES = INT32_C(23);
    static const int32_t SECBOOT_TOOL_TZ_ERR_FEAT_SECELF_COMP_INVALID_IN_PAYLOAD_SIZE = INT32_C(24);
    static const int32_t SECBOOT_TOOL_TZ_ERR_FEAT_SECELF_COMP_INVALID_OUT_PAYLOAD_SIZE = INT32_C(25);
    static const int32_t SECBOOT_TOOL_TZ_ERR_FEAT_GET_SEC_STATE = INT32_C(26);
    static const int32_t SECBOOT_TOOL_TZ_ERR_FEAT_GET_SEC_STATE_INVALID_OUT_PAYLOAD_SIZE = INT32_C(27);

    virtual ~IIDiagFuseService() {}

    virtual int32_t secbootToolGetInfo(const void* inBuf_ptr, size_t inBuf_len, void* outBuf_ptr, size_t outBuf_len, size_t* outBuf_lenout) = 0;

   protected:
    static const ObjectOp OP_secbootToolGetInfo = 0;
};

class IDiagFuseService : public IIDiagFuseService, public ProxyBase {
   public:
    IDiagFuseService() {}
    IDiagFuseService(Object impl) : ProxyBase(impl) {}
    virtual ~IDiagFuseService() {}

    virtual int32_t secbootToolGetInfo(const void* inBuf_ptr, size_t inBuf_len, void* outBuf_ptr, size_t outBuf_len, size_t* outBuf_lenout) {
        ObjectArg a[2]={{{0,0}}};
        a[0].bi = (ObjectBufIn) {inBuf_ptr, inBuf_len * 1};
        a[1].b = (ObjectBuf) {outBuf_ptr, outBuf_len * 1};

        int32_t result = invoke(OP_secbootToolGetInfo, a, ObjectCounts_pack(1, 1, 0, 0));
        if (Object_OK != result) { return result; }

        *outBuf_lenout = a[1].b.size / 1;

        return result;
    }

};

