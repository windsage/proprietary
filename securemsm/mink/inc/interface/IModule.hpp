#pragma once
// Copyright (c) 2015, 2021 Qualcomm Technologies, Inc.

// All Rights Reserved.

// Confidential and Proprietary - Qualcomm Technologies, Inc.

// IModule.idl

//

// This interface requests objects from modules.

/** @cond */

// AUTOGENERATED FILE: DO NOT EDIT

#include <cstdint>
#include "object.h"
#include "proxy_base.hpp"

class IIModule {
   public:
    static const int32_t ERROR_NOT_FOUND = INT32_C(10);

    virtual ~IIModule() {}

    virtual int32_t open(uint32_t id_val, const ProxyBase &credentials_ref, ProxyBase &obj_ref) = 0;
    virtual int32_t shutdown() = 0;

   protected:
    static const ObjectOp OP_open = 0;
    static const ObjectOp OP_shutdown = 1;
};

class IModule : public IIModule, public ProxyBase {
   public:
    IModule() {}
    IModule(Object impl) : ProxyBase(impl) {}
    virtual ~IModule() {}

    virtual int32_t open(uint32_t id_val, const ProxyBase &credentials_ref, ProxyBase &obj_ref) {
        ObjectArg a[3]={{{0,0}}};
        a[0].b = (ObjectBuf) {&id_val, sizeof(uint32_t)};
        a[1].o = credentials_ref.get();

        int32_t result = invoke(OP_open, a, ObjectCounts_pack(1, 0, 1, 1));
        if (Object_OK != result) { return result; }

        obj_ref.consume(a[2].o);

        return result;
    }

    virtual int32_t shutdown() {
        return invoke(OP_shutdown, 0, 0);
    }

};

