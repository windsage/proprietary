#pragma once
/*
 * Copyright (c) Qualcomm Technologies, Inc. and/or its subsidiaries.
 * All rights reserved.
 * Confidential and Proprietary - Qualcomm Technologies, Inc.
 */

/** @file IQWESConfig.idl */

/** @cond */

// AUTOGENERATED FILE: DO NOT EDIT

#include <cstdint>
#include "object.h"
#include "proxy_base.hpp"

class IIQWESConfig {
   public:
    static const uint64_t OPT_SELECT_TEST_ROOT = UINT64_C(0x00000001);
    static const uint32_t CLOUD_TTIME = UINT32_C(1);
    static const uint32_t SET_TIME_TO_LIVE = UINT32_C(2);

    static const int32_t ERROR_OPTS_NOT_SUPPORTED = INT32_C(10);
    static const int32_t ERROR_INVALID_PARAM = INT32_C(11);
    static const int32_t ERROR_TTIME_ALREADY_SET = INT32_C(12);
    static const int32_t ERROR_INVALID_NONCE = INT32_C(13);
    static const int32_t ERROR_REQUEST_EXPIRED = INT32_C(14);
    static const int32_t ERROR_ECDSA_VERIFY_SIGNATURE = INT32_C(15);
    static const int32_t ERROR_CBOR_INVALID_BUFFER_SIZE = INT32_C(16);
    static const int32_t ERROR_CBOR_DECODE_FAILED = INT32_C(17);
    static const int32_t ERROR_CBOR_ENCODE_FAILED = INT32_C(18);
    static const int32_t ERROR_PACKET_FORMAT = INT32_C(19);
    static const int32_t ERROR_INVALID_PROPERTY_ID = INT32_C(20);

    virtual ~IIQWESConfig() {}

    virtual int32_t getNonce(void* nonce_ptr, size_t nonce_len, size_t* nonce_lenout) = 0;
    virtual int32_t setProperty(uint32_t propertyID_val, const void* propertyValue_ptr, size_t propertyValue_len) = 0;
    virtual int32_t setOptions(uint64_t optionValue_val) = 0;

   protected:
    static const ObjectOp OP_getNonce = 0;
    static const ObjectOp OP_setProperty = 1;
    static const ObjectOp OP_setOptions = 2;
};

class IQWESConfig : public IIQWESConfig, public ProxyBase {
   public:
    IQWESConfig() {}
    IQWESConfig(Object impl) : ProxyBase(impl) {}
    virtual ~IQWESConfig() {}

    virtual int32_t getNonce(void* nonce_ptr, size_t nonce_len, size_t* nonce_lenout) {
        ObjectArg a[1]={{{0,0}}};
        a[0].b = (ObjectBuf) {nonce_ptr, nonce_len * 1};

        int32_t result = invoke(OP_getNonce, a, ObjectCounts_pack(0, 1, 0, 0));
        if (Object_OK != result) { return result; }

        *nonce_lenout = a[0].b.size / 1;

        return result;
    }

    virtual int32_t setProperty(uint32_t propertyID_val, const void* propertyValue_ptr, size_t propertyValue_len) {
        ObjectArg a[2]={{{0,0}}};
        a[0].b = (ObjectBuf) {&propertyID_val, sizeof(uint32_t)};
        a[1].bi = (ObjectBufIn) {propertyValue_ptr, propertyValue_len * 1};

        return invoke(OP_setProperty, a, ObjectCounts_pack(2, 0, 0, 0));
    }

    virtual int32_t setOptions(uint64_t optionValue_val) {
        ObjectArg a[1]={{{0,0}}};
        a[0].b = (ObjectBuf) {&optionValue_val, sizeof(uint64_t)};

        return invoke(OP_setOptions, a, ObjectCounts_pack(1, 0, 0, 0));
    }

};

