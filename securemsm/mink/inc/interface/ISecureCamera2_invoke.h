// Copyright (c) 2019-2021,2023 Qualcomm Technologies, Inc.
// All Rights Reserved.
// Confidential and Proprietary - Qualcomm Technologies, Inc.
#pragma once
// AUTOGENERATED FILE: DO NOT EDIT

#include <stdint.h>
#include "object.h"
#include "ISecureCamera2Notify.h"
#include "ISecureCamera2.h"

#define ISecureCamera2_DEFINE_INVOKE(func, prefix, type) \
  int32_t func(ObjectCxt h, ObjectOp op, ObjectArg *a, ObjectCounts k) \
  { \
    type me = (type) h; \
    switch (ObjectOp_methodID(op)) { \
      case Object_OP_release: { \
        if (k != ObjectCounts_pack(0, 0, 0, 0)) { \
          break; \
        } \
        return prefix##release(me); \
      } \
      case Object_OP_retain: { \
        if (k != ObjectCounts_pack(0, 0, 0, 0)) { \
          break; \
        } \
        return prefix##retain(me); \
      } \
      case ISecureCamera2_OP_setParam: { \
        if (k != ObjectCounts_pack(2, 0, 0, 0) || \
          a[0].b.size != 4) { \
          break; \
        } \
        const uint32_t *paramId_ptr = (const uint32_t*)a[0].b.ptr; \
        const void *paramBuf_ptr = (const void*)a[1].b.ptr; \
        size_t paramBuf_len = a[1].b.size / 1; \
        return prefix##setParam(me, *paramId_ptr, paramBuf_ptr, paramBuf_len); \
      } \
      case ISecureCamera2_OP_registerNotifyCB: { \
        if (k != ObjectCounts_pack(0, 0, 1, 0)) { \
          break; \
        } \
        return prefix##registerNotifyCB(me, a[0].o); \
      } \
      case ISecureCamera2_OP_resetCamera: { \
        if (k != ObjectCounts_pack(0, 0, 0, 0)) { \
          break; \
        } \
        return prefix##resetCamera(me); \
      } \
      case ISecureCamera2_OP_getCSFVersion: { \
        if (k != ObjectCounts_pack(0, 1, 0, 0) || \
          a[0].b.size != 12) { \
          break; \
        } \
        struct { \
          uint32_t m_archVer; \
          uint32_t m_maxVer; \
          uint32_t m_minVer; \
        } *o = a[0].b.ptr; \
        return prefix##getCSFVersion(me, &o->m_archVer, &o->m_maxVer, &o->m_minVer); \
      } \
    } \
    return Object_ERROR_INVALID; \
  }


