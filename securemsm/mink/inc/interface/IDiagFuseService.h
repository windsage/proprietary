// Copyright (c) 2022 Qualcomm Technologies, Inc.
// All Rights Reserved.
// Confidential and Proprietary - Qualcomm Technologies, Inc.
/** @cond */
#pragma once
// AUTOGENERATED FILE: DO NOT EDIT

#include <stdint.h>
#include "object.h"

#define IDiagFuseService_SECBOOT_TOOL_TZ_SUCCESS INT32_C(10)
#define IDiagFuseService_SECBOOT_TOOL_TZ_FAILURE INT32_C(11)
#define IDiagFuseService_SECBOOT_TOOL_TZ_ERR_TOOL_NOT_SUPPORTED INT32_C(12)
#define IDiagFuseService_SECBOOT_TOOL_TZ_ERR_INVALID_RSP_PKT INT32_C(13)
#define IDiagFuseService_SECBOOT_TOOL_TZ_ERR_INVALID_RSP_PKT_SIZE INT32_C(14)
#define IDiagFuseService_SECBOOT_TOOL_TZ_ERR_INVALID_REQ_PKT INT32_C(15)
#define IDiagFuseService_SECBOOT_TOOL_TZ_ERR_INVALID_REQ_PKT_SIZE INT32_C(16)
#define IDiagFuseService_SECBOOT_TOOL_TZ_ERR_INVALID_OPERATION_ID INT32_C(17)
#define IDiagFuseService_SECBOOT_TOOL_TZ_ERR_INVALID_FEATURE_ID INT32_C(18)
#define IDiagFuseService_SECBOOT_TOOL_TZ_ERR_INVALID_RSP_PAYLOAD_TYPE INT32_C(19)
#define IDiagFuseService_SECBOOT_TOOL_TZ_ERR_MEMORY_ALLOC_FAILED INT32_C(20)
#define IDiagFuseService_SECBOOT_TOOL_TZ_ERR_FEAT_SECELF_COMP_NOT_SUPPORTED INT32_C(21)
#define IDiagFuseService_SECBOOT_TOOL_TZ_ERR_FEAT_SECELF_COMP_INVALID_ADDRESS INT32_C(22)
#define IDiagFuseService_SECBOOT_TOOL_TZ_ERR_FEAT_SECELF_COMP_INVALID_NO_OF_ENTRIES INT32_C(23)
#define IDiagFuseService_SECBOOT_TOOL_TZ_ERR_FEAT_SECELF_COMP_INVALID_IN_PAYLOAD_SIZE INT32_C(24)
#define IDiagFuseService_SECBOOT_TOOL_TZ_ERR_FEAT_SECELF_COMP_INVALID_OUT_PAYLOAD_SIZE INT32_C(25)
#define IDiagFuseService_SECBOOT_TOOL_TZ_ERR_FEAT_GET_SEC_STATE INT32_C(26)
#define IDiagFuseService_SECBOOT_TOOL_TZ_ERR_FEAT_GET_SEC_STATE_INVALID_OUT_PAYLOAD_SIZE INT32_C(27)

#define IDiagFuseService_OP_secbootToolGetInfo 0

static inline int32_t
IDiagFuseService_release(Object self)
{
  return Object_invoke(self, Object_OP_release, 0, 0);
}

static inline int32_t
IDiagFuseService_retain(Object self)
{
  return Object_invoke(self, Object_OP_retain, 0, 0);
}

static inline int32_t
IDiagFuseService_secbootToolGetInfo(Object self, const void *inBuf_ptr, size_t inBuf_len, void *outBuf_ptr, size_t outBuf_len, size_t *outBuf_lenout)
{
  ObjectArg a[2]={{{0,0}}};
  a[0].bi = (ObjectBufIn) { inBuf_ptr, inBuf_len * 1 };
  a[1].b = (ObjectBuf) { outBuf_ptr, outBuf_len * 1 };

  int32_t result = Object_invoke(self, IDiagFuseService_OP_secbootToolGetInfo, a, ObjectCounts_pack(1, 1, 0, 0));

  *outBuf_lenout = a[1].b.size / 1;

  return result;
}



