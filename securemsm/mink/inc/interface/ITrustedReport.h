/*
 * Copyright (c) 2021-2023 Qualcomm Technologies, Inc.
 * All Rights Reserved.
 * Confidential and Proprietary - Qualcomm Technologies, Inc.
 */
/** @file  ITrustedReport.idl */
/** @cond */
#pragma once
// AUTOGENERATED FILE: DO NOT EDIT

#include <stdint.h>
#include "object.h"

#define IRefreshCallback_REFRESH_SUCCESS UINT32_C(0)
#define IRefreshCallback_REFRESH_FAILURE UINT32_C(1)
#define IRefreshCallback_REFRESH_TIMEOUT UINT32_C(2)

#define IRefreshCallback_OP_onResponse 0

static inline int32_t
IRefreshCallback_release(Object self)
{
  return Object_invoke(self, Object_OP_release, 0, 0);
}

static inline int32_t
IRefreshCallback_retain(Object self)
{
  return Object_invoke(self, Object_OP_retain, 0, 0);
}

static inline int32_t
IRefreshCallback_onResponse(Object self, uint32_t status_val)
{
  ObjectArg a[1]={{{0,0}}};
  a[0].b = (ObjectBuf) { &status_val, sizeof(uint32_t) };

  return Object_invoke(self, IRefreshCallback_OP_onResponse, a, ObjectCounts_pack(1, 0, 0, 0));
}


#define ITrustedReport_TLOC_REPORT UINT64_C(0x0000000000000001)
#define ITrustedReport_QSRP_REPORT UINT64_C(0x0000000000000002)
#define ITrustedReport_TTIME_REPORT UINT64_C(0x0000000000000004)
#define ITrustedReport_CSR_REPORT UINT64_C(0x0000000000000008)
#define ITrustedReport_CDR_REPORT UINT64_C(0x0000000000000010)
#define ITrustedReport_SMSR_REPORT UINT64_C(0x0000000000000020)
#define ITrustedReport_OEM_REPORT UINT64_C(0x0000000000000040)
#define ITrustedReport_GOOGLEBCC_REPORT UINT64_C(0x0000000000000080)
#define ITrustedReport_PLATFORMBOOT_REPORT UINT64_C(0x0000000000000100)
#define ITrustedReport_HLOSBOOT_REPORT UINT64_C(0x0000000000000200)
#define ITrustedReport_SECURITY_REPORT UINT64_C(0x0000000000000400)

#define ITrustedReport_NO_MEMORY INT32_C(10)
#define ITrustedReport_REPORT_FAILURE INT32_C(11)
#define ITrustedReport_RESERVED_2 INT32_C(12)
#define ITrustedReport_INVALID_REPORT_TYPE INT32_C(13)
#define ITrustedReport_RESERVED_3 INT32_C(14)
#define ITrustedReport_RESERVED_4 INT32_C(15)
#define ITrustedReport_INVALID_ARGUMENT INT32_C(16)

#define ITrustedReport_OP_getStatus 0
#define ITrustedReport_OP_refresh 1
#define ITrustedReport_OP_getReport 2

static inline int32_t
ITrustedReport_release(Object self)
{
  return Object_invoke(self, Object_OP_release, 0, 0);
}

static inline int32_t
ITrustedReport_retain(Object self)
{
  return Object_invoke(self, Object_OP_retain, 0, 0);
}

static inline int32_t
ITrustedReport_getStatus(Object self, uint64_t reportType_val, void *statusReport_ptr, size_t statusReport_len, size_t *statusReport_lenout)
{
  ObjectArg a[2]={{{0,0}}};
  a[0].b = (ObjectBuf) { &reportType_val, sizeof(uint64_t) };
  a[1].b = (ObjectBuf) { statusReport_ptr, statusReport_len * 1 };

  int32_t result = Object_invoke(self, ITrustedReport_OP_getStatus, a, ObjectCounts_pack(1, 1, 0, 0));

  *statusReport_lenout = a[1].b.size / 1;

  return result;
}

static inline int32_t
ITrustedReport_refresh(Object self, uint64_t reportType_val, uint64_t timeout_val, Object callback_val)
{
  ObjectArg a[2]={{{0,0}}};
  struct {
    uint64_t m_reportType;
    uint64_t m_timeout;
  } i = {0, 0};
  a[0].b = (ObjectBuf) { &i, 16 };
  i.m_reportType = reportType_val;
  i.m_timeout = timeout_val;
  a[1].o = callback_val;

  return Object_invoke(self, ITrustedReport_OP_refresh, a, ObjectCounts_pack(1, 0, 1, 0));
}

static inline int32_t
ITrustedReport_getReport(Object self, uint64_t reportType_val, void *report_ptr, size_t report_len, size_t *report_lenout)
{
  ObjectArg a[2]={{{0,0}}};
  a[0].b = (ObjectBuf) { &reportType_val, sizeof(uint64_t) };
  a[1].b = (ObjectBuf) { report_ptr, report_len * 1 };

  int32_t result = Object_invoke(self, ITrustedReport_OP_getReport, a, ObjectCounts_pack(1, 1, 0, 0));

  *report_lenout = a[1].b.size / 1;

  return result;
}



