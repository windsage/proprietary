// =======================================================================
// Copyright (c) 2022 Qualcomm Technologies, Inc.
// All Rights Reserved.
// Confidential and Proprietary - Qualcomm Technologies, Inc.
// =======================================================================

/** @cond */
#pragma once
// AUTOGENERATED FILE: DO NOT EDIT

#include <stdint.h>
#include "object.h"
#include "IWait.h"

#define IWait_DEFINE_INVOKE(func, prefix, type) \
  int32_t func(ObjectCxt h, ObjectOp op, ObjectArg *a, ObjectCounts k) \
  { \
    type me = (type) h; \
    switch (ObjectOp_methodID(op)) { \
      case Object_OP_release: { \
        return prefix##release(me); \
      } \
      case Object_OP_retain: { \
        return prefix##retain(me); \
      } \
      case IWait_OP_wait: { \
        if (k != ObjectCounts_pack(1, 1, 0, 0) || \
          a[0].b.size != 12 || \
          a[1].b.size != 4) { \
          break; \
        } \
        const struct { \
          uint32_t m_msec; \
          uint32_t m_code; \
          uint32_t m_events; \
        } *i = reinterpret_cast<decltype(i)>(a[0].b.ptr); \
        uint32_t *result_ptr = (uint32_t*) a[1].b.ptr; \
        return prefix##wait(me, i->m_msec, i->m_code, i->m_events, result_ptr); \
      } \
      case IWait_OP_signal: { \
        if (k != ObjectCounts_pack(1, 0, 0, 0) || \
          a[0].b.size != 8) { \
          break; \
        } \
        const struct { \
          uint32_t m_code; \
          uint32_t m_events; \
        } *i = reinterpret_cast<decltype(i)>(a[0].b.ptr); \
        return prefix##signal(me, i->m_code, i->m_events); \
      } \
    } \
    return Object_ERROR_INVALID; \
  }
