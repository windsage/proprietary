/*
 * Copyright (c) 2021-2023 Qualcomm Technologies, Inc.
 * All Rights Reserved.
 * Confidential and Proprietary - Qualcomm Technologies, Inc.
 */
/** @file  ITrustedReport.idl */
/** @cond */
#pragma once
// AUTOGENERATED FILE: DO NOT EDIT

#include <stdint.h>
#include "object.h"
#include "ITrustedReport.h"

#define IRefreshCallback_DEFINE_INVOKE(func, prefix, type) \
  int32_t func(ObjectCxt h, ObjectOp op, ObjectArg *a, ObjectCounts k) \
  { \
    type me = (type) h; \
    switch (ObjectOp_methodID(op)) { \
      case Object_OP_release: { \
        if (k != ObjectCounts_pack(0, 0, 0, 0)) { \
          break; \
        } \
        return prefix##release(me); \
      } \
      case Object_OP_retain: { \
        if (k != ObjectCounts_pack(0, 0, 0, 0)) { \
          break; \
        } \
        return prefix##retain(me); \
      } \
      case IRefreshCallback_OP_onResponse: { \
        if (k != ObjectCounts_pack(1, 0, 0, 0) || \
          a[0].b.size != 4) { \
          break; \
        } \
        const uint32_t *status_ptr = (const uint32_t*)a[0].b.ptr; \
        return prefix##onResponse(me, *status_ptr); \
      } \
    } \
    return Object_ERROR_INVALID; \
  }

#define ITrustedReport_DEFINE_INVOKE(func, prefix, type) \
  int32_t func(ObjectCxt h, ObjectOp op, ObjectArg *a, ObjectCounts k) \
  { \
    type me = (type) h; \
    switch (ObjectOp_methodID(op)) { \
      case Object_OP_release: { \
        if (k != ObjectCounts_pack(0, 0, 0, 0)) { \
          break; \
        } \
        return prefix##release(me); \
      } \
      case Object_OP_retain: { \
        if (k != ObjectCounts_pack(0, 0, 0, 0)) { \
          break; \
        } \
        return prefix##retain(me); \
      } \
      case ITrustedReport_OP_getStatus: { \
        if (k != ObjectCounts_pack(1, 1, 0, 0) || \
          a[0].b.size != 8) { \
          break; \
        } \
        const uint64_t *reportType_ptr = (const uint64_t*)a[0].b.ptr; \
        void *statusReport_ptr = (void*)a[1].b.ptr; \
        size_t statusReport_len = a[1].b.size / 1; \
        int32_t r = prefix##getStatus(me, *reportType_ptr, statusReport_ptr, statusReport_len, &statusReport_len); \
        a[1].b.size = statusReport_len * 1; \
        return r; \
      } \
      case ITrustedReport_OP_refresh: { \
        if (k != ObjectCounts_pack(1, 0, 1, 0) || \
          a[0].b.size != 16) { \
          break; \
        } \
        const struct { \
          uint64_t m_reportType; \
          uint64_t m_timeout; \
        } *i = a[0].b.ptr; \
        return prefix##refresh(me, i->m_reportType, i->m_timeout, a[1].o); \
      } \
      case ITrustedReport_OP_getReport: { \
        if (k != ObjectCounts_pack(1, 1, 0, 0) || \
          a[0].b.size != 8) { \
          break; \
        } \
        const uint64_t *reportType_ptr = (const uint64_t*)a[0].b.ptr; \
        void *report_ptr = (void*)a[1].b.ptr; \
        size_t report_len = a[1].b.size / 1; \
        int32_t r = prefix##getReport(me, *reportType_ptr, report_ptr, report_len, &report_len); \
        a[1].b.size = report_len * 1; \
        return r; \
      } \
    } \
    return Object_ERROR_INVALID; \
  }