// Copyright (c) 2019-2021,2023 Qualcomm Technologies, Inc.
// All Rights Reserved.
// Confidential and Proprietary - Qualcomm Technologies, Inc.
#pragma once
// AUTOGENERATED FILE: DO NOT EDIT

#include <stdint.h>
#include "object.h"
#include "ISecureCamera2Notify.h"

#define ISecureCamera2_PARAM_LICENSE UINT32_C(1)
#define ISecureCamera2_PARAM_NUM_SENSORS UINT32_C(2)

#define ISecureCamera2_ERROR_LICENSE_VALIDATION INT32_C(10)
#define ISecureCamera2_ERROR_WRONG_STATE INT32_C(11)
#define ISecureCamera2_ERROR_UNSUPPORTED INT32_C(12)

#define ISecureCamera2_OP_setParam 0
#define ISecureCamera2_OP_registerNotifyCB 1
#define ISecureCamera2_OP_resetCamera 2
#define ISecureCamera2_OP_getCSFVersion 3

static inline int32_t
ISecureCamera2_release(Object self)
{
  return Object_invoke(self, Object_OP_release, 0, 0);
}

static inline int32_t
ISecureCamera2_retain(Object self)
{
  return Object_invoke(self, Object_OP_retain, 0, 0);
}

static inline int32_t
ISecureCamera2_setParam(Object self, uint32_t paramId_val, const void *paramBuf_ptr, size_t paramBuf_len)
{
  ObjectArg a[2]={{{0,0}}};
  a[0].b = (ObjectBuf) { &paramId_val, sizeof(uint32_t) };
  a[1].bi = (ObjectBufIn) { paramBuf_ptr, paramBuf_len * 1 };

  return Object_invoke(self, ISecureCamera2_OP_setParam, a, ObjectCounts_pack(2, 0, 0, 0));
}

static inline int32_t
ISecureCamera2_registerNotifyCB(Object self, Object cb_val)
{
  ObjectArg a[1]={{{0,0}}};
  a[0].o = cb_val;

  return Object_invoke(self, ISecureCamera2_OP_registerNotifyCB, a, ObjectCounts_pack(0, 0, 1, 0));
}

static inline int32_t
ISecureCamera2_resetCamera(Object self)
{
  return Object_invoke(self, ISecureCamera2_OP_resetCamera, 0, 0);
}

static inline int32_t
ISecureCamera2_getCSFVersion(Object self, uint32_t *archVer_ptr, uint32_t *maxVer_ptr, uint32_t *minVer_ptr)
{
  ObjectArg a[1]={{{0,0}}};
  struct {
    uint32_t m_archVer;
    uint32_t m_maxVer;
    uint32_t m_minVer;
  } o = {0, 0, 0};
  a[0].b = (ObjectBuf) { &o, 12 };

  int32_t result = Object_invoke(self, ISecureCamera2_OP_getCSFVersion, a, ObjectCounts_pack(0, 1, 0, 0));

  *archVer_ptr = o.m_archVer;
  *maxVer_ptr = o.m_maxVer;
  *minVer_ptr = o.m_minVer;

  return result;
}



