#pragma once
// Copyright (c) 2022 Qualcomm Technologies, Inc.

// All Rights Reserved.

// Confidential and Proprietary - Qualcomm Technologies, Inc.

/** @cond */

// AUTOGENERATED FILE: DO NOT EDIT

#include <cstdint>
#include "object.h"
#include "proxy_base.hpp"

class IIRPMBService {
   public:
    static const int32_t ERROR_RPMB_MAC = INT32_C(10);
    static const int32_t ERROR_RPMB_WRITE_COUNTER = INT32_C(11);
    static const int32_t ERROR_RPMB_ADDR = INT32_C(12);
    static const int32_t ERROR_RPMB_WRITE = INT32_C(13);
    static const int32_t ERROR_RPMB_READ = INT32_C(14);
    static const int32_t ERROR_RPMB_NOT_PROVISIONED = INT32_C(15);
    static const int32_t ERROR_RPMB_MAC_GENERATION = INT32_C(16);
    static const int32_t ERROR_RPMB_RNG_GENERATION = INT32_C(17);
    static const int32_t ERROR_RPMB_NONCE = INT32_C(18);
    static const int32_t ERROR_RPMB_PROVISIONED = INT32_C(19);

    virtual ~IIRPMBService() {}

    virtual int32_t rpmbProvisionKey(int32_t keyType_val) = 0;
    virtual int32_t rpmbErase() = 0;
    virtual int32_t rpmbCheckProv() = 0;

   protected:
    static const ObjectOp OP_rpmbProvisionKey = 0;
    static const ObjectOp OP_rpmbErase = 1;
    static const ObjectOp OP_rpmbCheckProv = 2;
};

class IRPMBService : public IIRPMBService, public ProxyBase {
   public:
    IRPMBService() {}
    IRPMBService(Object impl) : ProxyBase(impl) {}
    virtual ~IRPMBService() {}

    virtual int32_t rpmbProvisionKey(int32_t keyType_val) {
        ObjectArg a[1]={{{0,0}}};
        a[0].b = (ObjectBuf) {&keyType_val, sizeof(int32_t)};

        return invoke(OP_rpmbProvisionKey, a, ObjectCounts_pack(1, 0, 0, 0));
    }

    virtual int32_t rpmbErase() {
        return invoke(OP_rpmbErase, 0, 0);
    }

    virtual int32_t rpmbCheckProv() {
        return invoke(OP_rpmbCheckProv, 0, 0);
    }

};

