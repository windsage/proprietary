#pragma once
// Copyright (c) 2015, 2021 Qualcomm Technologies, Inc.

// All Rights Reserved.

// Confidential and Proprietary - Qualcomm Technologies, Inc.

/** @cond */

// AUTOGENERATED FILE: DO NOT EDIT

#include <cstdint>
#include "object.h"
#include "proxy_base.hpp"

class IICredentials {
   public:
    static const int32_t ERROR_NOT_FOUND = INT32_C(10);
    static const int32_t ERROR_NAME_SIZE = INT32_C(11);
    static const int32_t ERROR_VALUE_SIZE = INT32_C(12);

    virtual ~IICredentials() {}

    virtual int32_t getPropertyByIndex(uint32_t index_val, void* name_ptr, size_t name_len, size_t* name_lenout, void* value_ptr, size_t value_len, size_t* value_lenout) = 0;
    virtual int32_t getValueByName(const void* name_ptr, size_t name_len, void* value_ptr, size_t value_len, size_t* value_lenout) = 0;

   protected:
    static const ObjectOp OP_getPropertyByIndex = 0;
    static const ObjectOp OP_getValueByName = 1;
};

class ICredentials : public IICredentials, public ProxyBase {
   public:
    ICredentials() {}
    ICredentials(Object impl) : ProxyBase(impl) {}
    virtual ~ICredentials() {}

    virtual int32_t getPropertyByIndex(uint32_t index_val, void* name_ptr, size_t name_len, size_t* name_lenout, void* value_ptr, size_t value_len, size_t* value_lenout) {
        ObjectArg a[3]={{{0,0}}};
        a[0].b = (ObjectBuf) {&index_val, sizeof(uint32_t)};
        a[1].b = (ObjectBuf) {name_ptr, name_len * 1};
        a[2].b = (ObjectBuf) {value_ptr, value_len * 1};

        int32_t result = invoke(OP_getPropertyByIndex, a, ObjectCounts_pack(1, 2, 0, 0));
        if (Object_OK != result) { return result; }

        *name_lenout = a[1].b.size / 1;
        *value_lenout = a[2].b.size / 1;

        return result;
    }

    virtual int32_t getValueByName(const void* name_ptr, size_t name_len, void* value_ptr, size_t value_len, size_t* value_lenout) {
        ObjectArg a[2]={{{0,0}}};
        a[0].bi = (ObjectBufIn) {name_ptr, name_len * 1};
        a[1].b = (ObjectBuf) {value_ptr, value_len * 1};

        int32_t result = invoke(OP_getValueByName, a, ObjectCounts_pack(1, 1, 0, 0));
        if (Object_OK != result) { return result; }

        *value_lenout = a[1].b.size / 1;

        return result;
    }

};

