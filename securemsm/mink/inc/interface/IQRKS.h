// Copyright (c) Qualcomm Technologies, Inc. and/or its subsidiaries.
// All rights reserved.
// Confidential and Proprietary - Qualcomm Technologies, Inc.
#pragma once
// AUTOGENERATED FILE: DO NOT EDIT

#include <stdint.h>
#include "object.h"

#define IQRKS_OPT_FAST_REPORT UINT64_C(0x00000001)
#define IQRKS_OPT_INTEGRITY_REPORT UINT64_C(0x00000002)
#define IQRKS_OPT_CURRENT_KP_INCIDENT_REPORT UINT64_C(0x00000004)
#define IQRKS_OPT_HISTORY_KP_INCIDENT_REPORT UINT64_C(0x00000008)
#define IQRKS_OPT_INTEGRITY_ONLY UINT64_C(0x00000010)

#define IQRKS_ERROR_NO_MEM INT32_C(10)
#define IQRKS_ERROR_NO_LICENSE_FILE INT32_C(11)
#define IQRKS_ERROR_INVALID_LICENSE INT32_C(12)
#define IQRKS_ERROR_BUFFER_TOO_SMALL INT32_C(13)
#define IQRKS_ERROR_CBOR_FAILURE INT32_C(14)
#define IQRKS_ERROR_NO_MPDATA INT32_C(15)
#define IQRKS_ERROR_KP_NOT_ENABLED INT32_C(16)
#define IQRKS_ERROR_NO_PFM INT32_C(17)
#define IQRKS_ERROR_INVALID_OPTION INT32_C(18)
#define IQRKS_ERROR_INVALID_INPUT INT32_C(19)
#define IQRKS_ERROR_INVALID_INVOKE INT32_C(20)
#define IQRKS_ERROR_HASH INT32_C(21)
#define IQRKS_ERROR_GENERAL INT32_C(22)
#define IQRKS_ERROR_SERVICE_ISSUE INT32_C(23)
#define IQRKS_ERROR_UPDATE_HISTORY INT32_C(24)
#define IQRKS_ERROR_SAVE_HISTORY INT32_C(25)
#define IQRKS_ERROR_FETCH_HISTORY INT32_C(26)

#define IQRKS_OP_GetReport 0
#define IQRKS_OP_MPProvisionStatus 1
#define IQRKS_OP_getMPData 2
#define IQRKS_OP_CheckLicenseKP 3
#define IQRKS_OP_UpdateHistory 4
#define IQRKS_OP_SetGetMPData 5
#define IQRKS_OP_SetAssetInfo 6

static inline int32_t
IQRKS_release(Object self)
{
  return Object_invoke(self, Object_OP_release, 0, 0);
}

static inline int32_t
IQRKS_retain(Object self)
{
  return Object_invoke(self, Object_OP_retain, 0, 0);
}

static inline int32_t
IQRKS_GetReport(Object self, const void *license_ptr, size_t license_len, uint64_t flags_val, void *data_ptr, size_t data_len, size_t *data_lenout)
{
  ObjectArg a[3]={{{0,0}}};
  a[0].bi = (ObjectBufIn) { license_ptr, license_len * 1 };
  a[1].b = (ObjectBuf) { &flags_val, sizeof(uint64_t) };
  a[2].b = (ObjectBuf) { data_ptr, data_len * 1 };

  int32_t result = Object_invoke(self, IQRKS_OP_GetReport, a, ObjectCounts_pack(2, 1, 0, 0));

  *data_lenout = a[2].b.size / 1;

  return result;
}

static inline int32_t
IQRKS_MPProvisionStatus(Object self, uint32_t *status_ptr)
{
  ObjectArg a[1]={{{0,0}}};
  a[0].b = (ObjectBuf) { status_ptr, sizeof(uint32_t) };

  return Object_invoke(self, IQRKS_OP_MPProvisionStatus, a, ObjectCounts_pack(0, 1, 0, 0));
}

static inline int32_t
IQRKS_getMPData(Object self, uint32_t *text_protection_enbled_ptr, uint32_t *pt_alignment_ptr, void *mpdatabuf_ptr, size_t mpdatabuf_len, size_t *mpdatabuf_lenout)
{
  ObjectArg a[2]={{{0,0}}};
  struct {
    uint32_t m_text_protection_enbled;
    uint32_t m_pt_alignment;
  } o = {0};
  a[0].b = (ObjectBuf) { &o, 8 };
  a[1].b = (ObjectBuf) { mpdatabuf_ptr, mpdatabuf_len * 1 };

  int32_t result = Object_invoke(self, IQRKS_OP_getMPData, a, ObjectCounts_pack(0, 2, 0, 0));

  *text_protection_enbled_ptr = o.m_text_protection_enbled;
  *pt_alignment_ptr = o.m_pt_alignment;
  *mpdatabuf_lenout = a[1].b.size / 1;

  return result;
}

static inline int32_t
IQRKS_CheckLicenseKP(Object self)
{
  return Object_invoke(self, IQRKS_OP_CheckLicenseKP, 0, 0);
}

static inline int32_t
IQRKS_UpdateHistory(Object self)
{
  return Object_invoke(self, IQRKS_OP_UpdateHistory, 0, 0);
}

static inline int32_t
IQRKS_SetGetMPData(Object self, const void *hlos_mp_data_ptr, size_t hlos_mp_data_len, uint32_t *text_protection_enbled_ptr, uint32_t *pt_alignment_ptr, void *mp_data_ptr, size_t mp_data_len, size_t *mp_data_lenout, uint32_t *out_data_source_ptr)
{
  ObjectArg a[3]={{{0,0}}};
  struct {
    uint32_t m_text_protection_enbled;
    uint32_t m_pt_alignment;
    uint32_t m_out_data_source;
  } o = {0};
  a[1].b = (ObjectBuf) { &o, 12 };
  a[0].bi = (ObjectBufIn) { hlos_mp_data_ptr, hlos_mp_data_len * 1 };
  a[2].b = (ObjectBuf) { mp_data_ptr, mp_data_len * 1 };

  int32_t result = Object_invoke(self, IQRKS_OP_SetGetMPData, a, ObjectCounts_pack(1, 2, 0, 0));

  *text_protection_enbled_ptr = o.m_text_protection_enbled;
  *pt_alignment_ptr = o.m_pt_alignment;
  *mp_data_lenout = a[2].b.size / 1;
  *out_data_source_ptr = o.m_out_data_source;

  return result;
}

static inline int32_t
IQRKS_SetAssetInfo(Object self, uint32_t asset_id_val)
{
  ObjectArg a[1]={{{0,0}}};
  a[0].b = (ObjectBuf) { &asset_id_val, sizeof(uint32_t) };

  return Object_invoke(self, IQRKS_OP_SetAssetInfo, a, ObjectCounts_pack(1, 0, 0, 0));
}



