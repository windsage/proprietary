#pragma once
/**
 * Copyright (c) 2022 Qualcomm Technologies, Inc.
 * All Rights Reserved.
 * Confidential and Proprietary - Qualcomm Technologies, Inc.
 *
 */

/** @cond */

// AUTOGENERATED FILE: DO NOT EDIT

#include <cstdint>
#include "ISecureCamera2App.hpp"
#include "impl_base.hpp"
#include "object.h"
#include "proxy_base.hpp"
#include "IMemObject.hpp"

class ISecureCamera2AppImplBase : protected ImplBase, public IISecureCamera2App
{
   public:
    ISecureCamera2AppImplBase()
    {
    }
    virtual ~ISecureCamera2AppImplBase()
    {
    }

   protected:
    virtual int32_t invoke(ObjectOp op, ObjectArg *a, ObjectCounts k)
    {
        switch (ObjectOp_methodID(op)) {
            case OP_initialize: {
                if (k != ObjectCounts_pack(2, 0, 0, 0) || a[0].b.size != 4) {
                    break;
                }

                const uint32_t *numSensors_ptr = (const uint32_t *)a[0].b.ptr;
                const uint8_t *havenLicense_ptr = (const uint8_t *)a[1].b.ptr;
                size_t havenLicense_len = a[1].b.size / 1;
                return initialize(*numSensors_ptr, havenLicense_ptr,
                                  havenLicense_len);
            }
            case OP_processFrame: {
                if (k != ObjectCounts_pack(1, 0, 1, 0) || a[0].b.size != 232) {
                    break;
                }

                const ISecureCamera2App_BufInfo *bufInfo_ptr =
                    (const ISecureCamera2App_BufInfo *)a[0].b.ptr;
                IMemObject p_buf(a[1].o);
                int32_t r = processFrame(*bufInfo_ptr, p_buf);
                p_buf.extract();
                return r;
            }
            case OP_resetCamera: {
                if (k != ObjectCounts_pack(0, 0, 0, 0)) {
                    break;
                }

                return resetCamera();
            }
            case OP_shutdown: {
                if (k != ObjectCounts_pack(0, 0, 0, 0)) {
                    break;
                }

                return shutdown();
            }
            default: {
                return Object_ERROR_INVALID;
            }
        }
        return Object_ERROR_INVALID;
    }
};
