#pragma once
/**
 * Copyright (c) 2022 Qualcomm Technologies, Inc.
 * All Rights Reserved.
 * Confidential and Proprietary - Qualcomm Technologies, Inc.
 *
 */

/** @cond */

// AUTOGENERATED FILE: DO NOT EDIT

#include <cstdint>
#include "object.h"
#include "proxy_base.hpp"
#include "IMemObject.hpp"

struct ISecureCamera2App_FrameInfo {
    int64_t camId;
    int64_t frameNumber;
    int64_t timeStamp;
};

struct ISecureCamera2App_PlaneInfo {
    uint32_t offset;
    uint32_t rowStride;
    uint32_t pixelStride;
};

struct ISecureCamera2App_PlaneData {
    uint32_t numOfInPlanes;
    ISecureCamera2App_PlaneInfo inPlanes[4];
    uint32_t numOfOutPlanes;
    ISecureCamera2App_PlaneInfo outPlanes[4];
};

struct ISecureCamera2App_BufInfo {
    ISecureCamera2App_FrameInfo frameInfo;
    ISecureCamera2App_PlaneData planeData[2];
};

class IISecureCamera2App
{
   public:
    static const int32_t ERROR_CAMERA_NOT_PROTECTED = INT32_C(10);
    static const int32_t ERROR_MAP_FAILURE = INT32_C(11);
    static const int32_t ERROR_KERNEL_FAILURE = INT32_C(12);

    virtual ~IISecureCamera2App()
    {
    }

    virtual int32_t initialize(uint32_t numSensors_val,
                               const uint8_t *havenLicense_ptr,
                               size_t havenLicense_len) = 0;
    virtual int32_t processFrame(const ISecureCamera2App_BufInfo &bufInfo_ref,
                                 const IMemObject &buf_ref) = 0;
    virtual int32_t resetCamera() = 0;
    virtual int32_t shutdown() = 0;

   protected:
    static const ObjectOp OP_initialize = 0;
    static const ObjectOp OP_processFrame = 1;
    static const ObjectOp OP_resetCamera = 2;
    static const ObjectOp OP_shutdown = 3;
};

class ISecureCamera2App : public IISecureCamera2App, public ProxyBase
{
   public:
    ISecureCamera2App()
    {
    }
    ISecureCamera2App(Object impl) : ProxyBase(impl)
    {
    }
    virtual ~ISecureCamera2App()
    {
    }

    virtual int32_t initialize(uint32_t numSensors_val,
                               const uint8_t *havenLicense_ptr,
                               size_t havenLicense_len)
    {
        ObjectArg a[2] = {{{0, 0}}};
        a[0].b = (ObjectBuf){&numSensors_val, sizeof(uint32_t)};
        a[1].bi =
            (ObjectBufIn){havenLicense_ptr, havenLicense_len * sizeof(uint8_t)};

        return invoke(OP_initialize, a, ObjectCounts_pack(2, 0, 0, 0));
    }

    virtual int32_t processFrame(const ISecureCamera2App_BufInfo &bufInfo_ref,
                                 const IMemObject &buf_ref)
    {
        ObjectArg a[2] = {{{0, 0}}};
        a[0].bi =
            (ObjectBufIn){&bufInfo_ref, sizeof(ISecureCamera2App_BufInfo)};
        a[1].o = buf_ref.get();

        return invoke(OP_processFrame, a, ObjectCounts_pack(1, 0, 1, 0));
    }

    virtual int32_t resetCamera()
    {
        return invoke(OP_resetCamera, 0, 0);
    }

    virtual int32_t shutdown()
    {
        return invoke(OP_shutdown, 0, 0);
    }
};
